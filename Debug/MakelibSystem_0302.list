
MakelibSystem_0302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004910  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b70  08004b70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b78  08004b78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041fc  2000000c  08004b8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004208  08004b8c  00024208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b94  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b28  00000000  00000000  00034bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  000376f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001378  00000000  00000000  00038b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001809d  00000000  00000000  00039f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e9f5  00000000  00000000  00051fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097237  00000000  00000000  000609a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7bd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005790  00000000  00000000  000f7c54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a98 	.word	0x08004a98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08004a98 	.word	0x08004a98

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <HAL_Init+0x40>)
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <HAL_Init+0x40>)
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_Init+0x40>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f8d8 	bl	80006be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	2000      	movs	r0, #0
 8000510:	f004 f9b8 	bl	8004884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f003 ff60 	bl	80043d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20003fc8 	.word	0x20003fc8

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20003fc8 	.word	0x20003fc8

08000564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ff4c 	bl	8000564 <__NVIC_SetPriorityGrouping>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e6:	f7ff ff61 	bl	80005ac <__NVIC_GetPriorityGrouping>
 80006ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	68b9      	ldr	r1, [r7, #8]
 80006f0:	6978      	ldr	r0, [r7, #20]
 80006f2:	f7ff ffb1 	bl	8000658 <NVIC_EncodePriority>
 80006f6:	4602      	mov	r2, r0
 80006f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff80 	bl	8000604 <__NVIC_SetPriority>
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff54 	bl	80005c8 <__NVIC_EnableIRQ>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
 8000742:	e159      	b.n	80009f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000744:	2201      	movs	r2, #1
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	4013      	ands	r3, r2
 8000756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	429a      	cmp	r2, r3
 800075e:	f040 8148 	bne.w	80009f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d003      	beq.n	8000772 <HAL_GPIO_Init+0x4a>
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b12      	cmp	r3, #18
 8000770:	d123      	bne.n	80007ba <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	08da      	lsrs	r2, r3, #3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3208      	adds	r2, #8
 800077a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800077e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	220f      	movs	r2, #15
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43db      	mvns	r3, r3
 8000790:	69ba      	ldr	r2, [r7, #24]
 8000792:	4013      	ands	r3, r2
 8000794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	691a      	ldr	r2, [r3, #16]
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	f003 0307 	and.w	r3, r3, #7
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	69ba      	ldr	r2, [r7, #24]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	08da      	lsrs	r2, r3, #3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3208      	adds	r2, #8
 80007b4:	69b9      	ldr	r1, [r7, #24]
 80007b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	2203      	movs	r2, #3
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	4013      	ands	r3, r2
 80007d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f003 0203 	and.w	r2, r3, #3
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	69ba      	ldr	r2, [r7, #24]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	69ba      	ldr	r2, [r7, #24]
 80007ec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d00b      	beq.n	800080e <HAL_GPIO_Init+0xe6>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d007      	beq.n	800080e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000802:	2b11      	cmp	r3, #17
 8000804:	d003      	beq.n	800080e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b12      	cmp	r3, #18
 800080c:	d130      	bne.n	8000870 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	2203      	movs	r2, #3
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	4013      	ands	r3, r2
 8000824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	68da      	ldr	r2, [r3, #12]
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000844:	2201      	movs	r2, #1
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	4013      	ands	r3, r2
 8000852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	091b      	lsrs	r3, r3, #4
 800085a:	f003 0201 	and.w	r2, r3, #1
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4313      	orrs	r3, r2
 8000868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	2203      	movs	r2, #3
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4013      	ands	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4313      	orrs	r3, r2
 8000898:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	f000 80a2 	beq.w	80009f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <HAL_GPIO_Init+0x2e4>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a55      	ldr	r2, [pc, #340]	; (8000a0c <HAL_GPIO_Init+0x2e4>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b53      	ldr	r3, [pc, #332]	; (8000a0c <HAL_GPIO_Init+0x2e4>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008ca:	4a51      	ldr	r2, [pc, #324]	; (8000a10 <HAL_GPIO_Init+0x2e8>)
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	3302      	adds	r3, #2
 80008d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4013      	ands	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a48      	ldr	r2, [pc, #288]	; (8000a14 <HAL_GPIO_Init+0x2ec>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d019      	beq.n	800092a <HAL_GPIO_Init+0x202>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a47      	ldr	r2, [pc, #284]	; (8000a18 <HAL_GPIO_Init+0x2f0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d013      	beq.n	8000926 <HAL_GPIO_Init+0x1fe>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a46      	ldr	r2, [pc, #280]	; (8000a1c <HAL_GPIO_Init+0x2f4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d00d      	beq.n	8000922 <HAL_GPIO_Init+0x1fa>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a45      	ldr	r2, [pc, #276]	; (8000a20 <HAL_GPIO_Init+0x2f8>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d007      	beq.n	800091e <HAL_GPIO_Init+0x1f6>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a44      	ldr	r2, [pc, #272]	; (8000a24 <HAL_GPIO_Init+0x2fc>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d101      	bne.n	800091a <HAL_GPIO_Init+0x1f2>
 8000916:	2304      	movs	r3, #4
 8000918:	e008      	b.n	800092c <HAL_GPIO_Init+0x204>
 800091a:	2307      	movs	r3, #7
 800091c:	e006      	b.n	800092c <HAL_GPIO_Init+0x204>
 800091e:	2303      	movs	r3, #3
 8000920:	e004      	b.n	800092c <HAL_GPIO_Init+0x204>
 8000922:	2302      	movs	r3, #2
 8000924:	e002      	b.n	800092c <HAL_GPIO_Init+0x204>
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <HAL_GPIO_Init+0x204>
 800092a:	2300      	movs	r3, #0
 800092c:	69fa      	ldr	r2, [r7, #28]
 800092e:	f002 0203 	and.w	r2, r2, #3
 8000932:	0092      	lsls	r2, r2, #2
 8000934:	4093      	lsls	r3, r2
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4313      	orrs	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800093c:	4934      	ldr	r1, [pc, #208]	; (8000a10 <HAL_GPIO_Init+0x2e8>)
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800094a:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <HAL_GPIO_Init+0x300>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	43db      	mvns	r3, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4013      	ands	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800096e:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <HAL_GPIO_Init+0x300>)
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <HAL_GPIO_Init+0x300>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	43db      	mvns	r3, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d003      	beq.n	8000998 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000998:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <HAL_GPIO_Init+0x300>)
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	43db      	mvns	r3, r3
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	4013      	ands	r3, r2
 80009ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d003      	beq.n	80009c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4013      	ands	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d003      	beq.n	80009ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3301      	adds	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	2b0f      	cmp	r3, #15
 80009fc:	f67f aea2 	bls.w	8000744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a00:	bf00      	nop
 8000a02:	3724      	adds	r7, #36	; 0x24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40013800 	.word	0x40013800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40013c00 	.word	0x40013c00

08000a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a3c:	787b      	ldrb	r3, [r7, #1]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a42:	887a      	ldrh	r2, [r7, #2]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a48:	e003      	b.n	8000a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	041a      	lsls	r2, r3, #16
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	619a      	str	r2, [r3, #24]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d101      	bne.n	8000a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e10f      	b.n	8000c92 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d106      	bne.n	8000a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f003 fcd2 	bl	8004430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2224      	movs	r2, #36	; 0x24
 8000a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f022 0201 	bic.w	r2, r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000aa4:	f000 fce6 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 8000aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a7b      	ldr	r2, [pc, #492]	; (8000c9c <HAL_I2C_Init+0x23c>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d807      	bhi.n	8000ac4 <HAL_I2C_Init+0x64>
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4a7a      	ldr	r2, [pc, #488]	; (8000ca0 <HAL_I2C_Init+0x240>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	bf94      	ite	ls
 8000abc:	2301      	movls	r3, #1
 8000abe:	2300      	movhi	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	e006      	b.n	8000ad2 <HAL_I2C_Init+0x72>
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4a77      	ldr	r2, [pc, #476]	; (8000ca4 <HAL_I2C_Init+0x244>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	bf94      	ite	ls
 8000acc:	2301      	movls	r3, #1
 8000ace:	2300      	movhi	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e0db      	b.n	8000c92 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4a72      	ldr	r2, [pc, #456]	; (8000ca8 <HAL_I2C_Init+0x248>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0c9b      	lsrs	r3, r3, #18
 8000ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68ba      	ldr	r2, [r7, #8]
 8000af6:	430a      	orrs	r2, r1
 8000af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a64      	ldr	r2, [pc, #400]	; (8000c9c <HAL_I2C_Init+0x23c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d802      	bhi.n	8000b14 <HAL_I2C_Init+0xb4>
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	3301      	adds	r3, #1
 8000b12:	e009      	b.n	8000b28 <HAL_I2C_Init+0xc8>
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b1a:	fb02 f303 	mul.w	r3, r2, r3
 8000b1e:	4a63      	ldr	r2, [pc, #396]	; (8000cac <HAL_I2C_Init+0x24c>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	099b      	lsrs	r3, r3, #6
 8000b26:	3301      	adds	r3, #1
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	430b      	orrs	r3, r1
 8000b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4956      	ldr	r1, [pc, #344]	; (8000c9c <HAL_I2C_Init+0x23c>)
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d80d      	bhi.n	8000b64 <HAL_I2C_Init+0x104>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	1e59      	subs	r1, r3, #1
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b56:	3301      	adds	r3, #1
 8000b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	bf38      	it	cc
 8000b60:	2304      	movcc	r3, #4
 8000b62:	e04f      	b.n	8000c04 <HAL_I2C_Init+0x1a4>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d111      	bne.n	8000b90 <HAL_I2C_Init+0x130>
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	1e58      	subs	r0, r3, #1
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6859      	ldr	r1, [r3, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	440b      	add	r3, r1
 8000b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b7e:	3301      	adds	r3, #1
 8000b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bf0c      	ite	eq
 8000b88:	2301      	moveq	r3, #1
 8000b8a:	2300      	movne	r3, #0
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	e012      	b.n	8000bb6 <HAL_I2C_Init+0x156>
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	1e58      	subs	r0, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6859      	ldr	r1, [r3, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	0099      	lsls	r1, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	bf0c      	ite	eq
 8000bb0:	2301      	moveq	r3, #1
 8000bb2:	2300      	movne	r3, #0
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_I2C_Init+0x15e>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e022      	b.n	8000c04 <HAL_I2C_Init+0x1a4>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10e      	bne.n	8000be4 <HAL_I2C_Init+0x184>
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	1e58      	subs	r0, r3, #1
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6859      	ldr	r1, [r3, #4]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	440b      	add	r3, r1
 8000bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bd8:	3301      	adds	r3, #1
 8000bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000be2:	e00f      	b.n	8000c04 <HAL_I2C_Init+0x1a4>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	1e58      	subs	r0, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6859      	ldr	r1, [r3, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	0099      	lsls	r1, r3, #2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	6809      	ldr	r1, [r1, #0]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69da      	ldr	r2, [r3, #28]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a1b      	ldr	r3, [r3, #32]
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	6911      	ldr	r1, [r2, #16]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68d2      	ldr	r2, [r2, #12]
 8000c3e:	4311      	orrs	r1, r2
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6812      	ldr	r2, [r2, #0]
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	695a      	ldr	r2, [r3, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 0201 	orr.w	r2, r2, #1
 8000c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	000186a0 	.word	0x000186a0
 8000ca0:	001e847f 	.word	0x001e847f
 8000ca4:	003d08ff 	.word	0x003d08ff
 8000ca8:	431bde83 	.word	0x431bde83
 8000cac:	10624dd3 	.word	0x10624dd3

08000cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e22d      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d075      	beq.n	8000dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cce:	4ba3      	ldr	r3, [pc, #652]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d00c      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cda:	4ba0      	ldr	r3, [pc, #640]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d112      	bne.n	8000d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ce6:	4b9d      	ldr	r3, [pc, #628]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cf2:	d10b      	bne.n	8000d0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf4:	4b99      	ldr	r3, [pc, #612]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d05b      	beq.n	8000db8 <HAL_RCC_OscConfig+0x108>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d157      	bne.n	8000db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e208      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d14:	d106      	bne.n	8000d24 <HAL_RCC_OscConfig+0x74>
 8000d16:	4b91      	ldr	r3, [pc, #580]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a90      	ldr	r2, [pc, #576]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e01d      	b.n	8000d60 <HAL_RCC_OscConfig+0xb0>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x98>
 8000d2e:	4b8b      	ldr	r3, [pc, #556]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a8a      	ldr	r2, [pc, #552]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b88      	ldr	r3, [pc, #544]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a87      	ldr	r2, [pc, #540]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e00b      	b.n	8000d60 <HAL_RCC_OscConfig+0xb0>
 8000d48:	4b84      	ldr	r3, [pc, #528]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a83      	ldr	r2, [pc, #524]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b81      	ldr	r3, [pc, #516]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a80      	ldr	r2, [pc, #512]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d013      	beq.n	8000d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fbf0 	bl	800054c <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fbec 	bl	800054c <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e1cd      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	4b76      	ldr	r3, [pc, #472]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f0      	beq.n	8000d70 <HAL_RCC_OscConfig+0xc0>
 8000d8e:	e014      	b.n	8000dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fbdc 	bl	800054c <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fbd8 	bl	800054c <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b64      	cmp	r3, #100	; 0x64
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e1b9      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000daa:	4b6c      	ldr	r3, [pc, #432]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0xe8>
 8000db6:	e000      	b.n	8000dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d063      	beq.n	8000e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dc6:	4b65      	ldr	r3, [pc, #404]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f003 030c 	and.w	r3, r3, #12
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00b      	beq.n	8000dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dd2:	4b62      	ldr	r3, [pc, #392]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d11c      	bne.n	8000e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dde:	4b5f      	ldr	r3, [pc, #380]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d116      	bne.n	8000e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dea:	4b5c      	ldr	r3, [pc, #368]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d005      	beq.n	8000e02 <HAL_RCC_OscConfig+0x152>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d001      	beq.n	8000e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e18d      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e02:	4b56      	ldr	r3, [pc, #344]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	4952      	ldr	r1, [pc, #328]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e16:	e03a      	b.n	8000e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d020      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e20:	4b4f      	ldr	r3, [pc, #316]	; (8000f60 <HAL_RCC_OscConfig+0x2b0>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e26:	f7ff fb91 	bl	800054c <HAL_GetTick>
 8000e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2c:	e008      	b.n	8000e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e2e:	f7ff fb8d 	bl	800054c <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e16e      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e40:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f0      	beq.n	8000e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4c:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4940      	ldr	r1, [pc, #256]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	600b      	str	r3, [r1, #0]
 8000e60:	e015      	b.n	8000e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e62:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <HAL_RCC_OscConfig+0x2b0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e68:	f7ff fb70 	bl	800054c <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e70:	f7ff fb6c 	bl	800054c <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e14d      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e82:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d030      	beq.n	8000efc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d016      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ea2:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_RCC_OscConfig+0x2b4>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea8:	f7ff fb50 	bl	800054c <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fb4c 	bl	800054c <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e12d      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f0      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x200>
 8000ece:	e015      	b.n	8000efc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ed0:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <HAL_RCC_OscConfig+0x2b4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fb39 	bl	800054c <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ede:	f7ff fb35 	bl	800054c <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e116      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f0      	bne.n	8000ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80a0 	beq.w	800104a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10f      	bne.n	8000f3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_RCC_OscConfig+0x2ac>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f36:	2301      	movs	r3, #1
 8000f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_RCC_OscConfig+0x2b8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d121      	bne.n	8000f8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_RCC_OscConfig+0x2b8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_RCC_OscConfig+0x2b8>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f52:	f7ff fafb 	bl	800054c <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	e011      	b.n	8000f7e <HAL_RCC_OscConfig+0x2ce>
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	42470000 	.word	0x42470000
 8000f64:	42470e80 	.word	0x42470e80
 8000f68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6c:	f7ff faee 	bl	800054c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e0cf      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7e:	4b6a      	ldr	r3, [pc, #424]	; (8001128 <HAL_RCC_OscConfig+0x478>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d106      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x2f0>
 8000f92:	4b66      	ldr	r3, [pc, #408]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f96:	4a65      	ldr	r2, [pc, #404]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f9e:	e01c      	b.n	8000fda <HAL_RCC_OscConfig+0x32a>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d10c      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x312>
 8000fa8:	4b60      	ldr	r3, [pc, #384]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8000faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fac:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8000fb4:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8000fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb8:	4a5c      	ldr	r2, [pc, #368]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8000fc0:	e00b      	b.n	8000fda <HAL_RCC_OscConfig+0x32a>
 8000fc2:	4b5a      	ldr	r3, [pc, #360]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8000fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc6:	4a59      	ldr	r2, [pc, #356]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8000fc8:	f023 0301 	bic.w	r3, r3, #1
 8000fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8000fce:	4b57      	ldr	r3, [pc, #348]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8000fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd2:	4a56      	ldr	r2, [pc, #344]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8000fd4:	f023 0304 	bic.w	r3, r3, #4
 8000fd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d015      	beq.n	800100e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fab3 	bl	800054c <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe8:	e00a      	b.n	8001000 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fea:	f7ff faaf 	bl	800054c <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e08e      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001000:	4b4a      	ldr	r3, [pc, #296]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8001002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0ee      	beq.n	8000fea <HAL_RCC_OscConfig+0x33a>
 800100c:	e014      	b.n	8001038 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100e:	f7ff fa9d 	bl	800054c <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001014:	e00a      	b.n	800102c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001016:	f7ff fa99 	bl	800054c <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	f241 3288 	movw	r2, #5000	; 0x1388
 8001024:	4293      	cmp	r3, r2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e078      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800102c:	4b3f      	ldr	r3, [pc, #252]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 800102e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1ee      	bne.n	8001016 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d105      	bne.n	800104a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a3a      	ldr	r2, [pc, #232]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8001044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d064      	beq.n	800111c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001052:	4b36      	ldr	r3, [pc, #216]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b08      	cmp	r3, #8
 800105c:	d05c      	beq.n	8001118 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d141      	bne.n	80010ea <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_RCC_OscConfig+0x480>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fa6e 	bl	800054c <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001074:	f7ff fa6a 	bl	800054c <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e04b      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69da      	ldr	r2, [r3, #28]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	019b      	lsls	r3, r3, #6
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	085b      	lsrs	r3, r3, #1
 80010aa:	3b01      	subs	r3, #1
 80010ac:	041b      	lsls	r3, r3, #16
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	061b      	lsls	r3, r3, #24
 80010b6:	491d      	ldr	r1, [pc, #116]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_RCC_OscConfig+0x480>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fa43 	bl	800054c <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ca:	f7ff fa3f 	bl	800054c <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e020      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x41a>
 80010e8:	e018      	b.n	800111c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_RCC_OscConfig+0x480>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fa2c 	bl	800054c <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f8:	f7ff fa28 	bl	800054c <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e009      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_RCC_OscConfig+0x47c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x448>
 8001116:	e001      	b.n	800111c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40007000 	.word	0x40007000
 800112c:	40023800 	.word	0x40023800
 8001130:	42470060 	.word	0x42470060

08001134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0ca      	b.n	80012de <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001148:	4b67      	ldr	r3, [pc, #412]	; (80012e8 <HAL_RCC_ClockConfig+0x1b4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d90c      	bls.n	8001170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001156:	4b64      	ldr	r3, [pc, #400]	; (80012e8 <HAL_RCC_ClockConfig+0x1b4>)
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800115e:	4b62      	ldr	r3, [pc, #392]	; (80012e8 <HAL_RCC_ClockConfig+0x1b4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d001      	beq.n	8001170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e0b6      	b.n	80012de <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d020      	beq.n	80011be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001188:	4b58      	ldr	r3, [pc, #352]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4a57      	ldr	r2, [pc, #348]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 800118e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a0:	4b52      	ldr	r3, [pc, #328]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	4a51      	ldr	r2, [pc, #324]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 80011a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ac:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	494c      	ldr	r1, [pc, #304]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d044      	beq.n	8001254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b46      	ldr	r3, [pc, #280]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d119      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e07d      	b.n	80012de <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d003      	beq.n	80011f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f2:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e06d      	b.n	80012de <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e065      	b.n	80012de <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f023 0203 	bic.w	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4933      	ldr	r1, [pc, #204]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	4313      	orrs	r3, r2
 8001222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001224:	f7ff f992 	bl	800054c <HAL_GetTick>
 8001228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122a:	e00a      	b.n	8001242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800122c:	f7ff f98e 	bl	800054c <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f241 3288 	movw	r2, #5000	; 0x1388
 800123a:	4293      	cmp	r3, r2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e04d      	b.n	80012de <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 020c 	and.w	r2, r3, #12
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	429a      	cmp	r2, r3
 8001252:	d1eb      	bne.n	800122c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_RCC_ClockConfig+0x1b4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d20c      	bcs.n	800127c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_RCC_ClockConfig+0x1b4>)
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <HAL_RCC_ClockConfig+0x1b4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d001      	beq.n	800127c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e030      	b.n	80012de <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4915      	ldr	r1, [pc, #84]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001296:	4313      	orrs	r3, r2
 8001298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d009      	beq.n	80012ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	490d      	ldr	r1, [pc, #52]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ba:	f000 f81d 	bl	80012f8 <HAL_RCC_GetSysClockFreq>
 80012be:	4601      	mov	r1, r0
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	fa21 f303 	lsr.w	r3, r1, r3
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 80012d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f003 fad4 	bl	8004884 <HAL_InitTick>

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	08004b58 	.word	0x08004b58
 80012f4:	20000008 	.word	0x20000008

080012f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800130e:	4b50      	ldr	r3, [pc, #320]	; (8001450 <HAL_RCC_GetSysClockFreq+0x158>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b04      	cmp	r3, #4
 8001318:	d007      	beq.n	800132a <HAL_RCC_GetSysClockFreq+0x32>
 800131a:	2b08      	cmp	r3, #8
 800131c:	d008      	beq.n	8001330 <HAL_RCC_GetSysClockFreq+0x38>
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 808d 	bne.w	800143e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001324:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001326:	60bb      	str	r3, [r7, #8]
       break;
 8001328:	e08c      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800132a:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <HAL_RCC_GetSysClockFreq+0x160>)
 800132c:	60bb      	str	r3, [r7, #8]
      break;
 800132e:	e089      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001330:	4b47      	ldr	r3, [pc, #284]	; (8001450 <HAL_RCC_GetSysClockFreq+0x158>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001338:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800133a:	4b45      	ldr	r3, [pc, #276]	; (8001450 <HAL_RCC_GetSysClockFreq+0x158>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d023      	beq.n	800138e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001346:	4b42      	ldr	r3, [pc, #264]	; (8001450 <HAL_RCC_GetSysClockFreq+0x158>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	099b      	lsrs	r3, r3, #6
 800134c:	f04f 0400 	mov.w	r4, #0
 8001350:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	ea03 0501 	and.w	r5, r3, r1
 800135c:	ea04 0602 	and.w	r6, r4, r2
 8001360:	4a3d      	ldr	r2, [pc, #244]	; (8001458 <HAL_RCC_GetSysClockFreq+0x160>)
 8001362:	fb02 f106 	mul.w	r1, r2, r6
 8001366:	2200      	movs	r2, #0
 8001368:	fb02 f205 	mul.w	r2, r2, r5
 800136c:	440a      	add	r2, r1
 800136e:	493a      	ldr	r1, [pc, #232]	; (8001458 <HAL_RCC_GetSysClockFreq+0x160>)
 8001370:	fba5 0101 	umull	r0, r1, r5, r1
 8001374:	1853      	adds	r3, r2, r1
 8001376:	4619      	mov	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0400 	mov.w	r4, #0
 800137e:	461a      	mov	r2, r3
 8001380:	4623      	mov	r3, r4
 8001382:	f7fe ff2d 	bl	80001e0 <__aeabi_uldivmod>
 8001386:	4603      	mov	r3, r0
 8001388:	460c      	mov	r4, r1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e049      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <HAL_RCC_GetSysClockFreq+0x158>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	099b      	lsrs	r3, r3, #6
 8001394:	f04f 0400 	mov.w	r4, #0
 8001398:	f240 11ff 	movw	r1, #511	; 0x1ff
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	ea03 0501 	and.w	r5, r3, r1
 80013a4:	ea04 0602 	and.w	r6, r4, r2
 80013a8:	4629      	mov	r1, r5
 80013aa:	4632      	mov	r2, r6
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	f04f 0400 	mov.w	r4, #0
 80013b4:	0154      	lsls	r4, r2, #5
 80013b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013ba:	014b      	lsls	r3, r1, #5
 80013bc:	4619      	mov	r1, r3
 80013be:	4622      	mov	r2, r4
 80013c0:	1b49      	subs	r1, r1, r5
 80013c2:	eb62 0206 	sbc.w	r2, r2, r6
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	f04f 0400 	mov.w	r4, #0
 80013ce:	0194      	lsls	r4, r2, #6
 80013d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013d4:	018b      	lsls	r3, r1, #6
 80013d6:	1a5b      	subs	r3, r3, r1
 80013d8:	eb64 0402 	sbc.w	r4, r4, r2
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	00e2      	lsls	r2, r4, #3
 80013e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013ea:	00d9      	lsls	r1, r3, #3
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	195b      	adds	r3, r3, r5
 80013f2:	eb44 0406 	adc.w	r4, r4, r6
 80013f6:	f04f 0100 	mov.w	r1, #0
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	02a2      	lsls	r2, r4, #10
 8001400:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001404:	0299      	lsls	r1, r3, #10
 8001406:	460b      	mov	r3, r1
 8001408:	4614      	mov	r4, r2
 800140a:	4618      	mov	r0, r3
 800140c:	4621      	mov	r1, r4
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f04f 0400 	mov.w	r4, #0
 8001414:	461a      	mov	r2, r3
 8001416:	4623      	mov	r3, r4
 8001418:	f7fe fee2 	bl	80001e0 <__aeabi_uldivmod>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_RCC_GetSysClockFreq+0x158>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	0c1b      	lsrs	r3, r3, #16
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	3301      	adds	r3, #1
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	60bb      	str	r3, [r7, #8]
      break;
 800143c:	e002      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001440:	60bb      	str	r3, [r7, #8]
      break;
 8001442:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001444:	68bb      	ldr	r3, [r7, #8]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	00f42400 	.word	0x00f42400
 8001458:	017d7840 	.word	0x017d7840

0800145c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_RCC_GetHCLKFreq+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008

08001474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001478:	f7ff fff0 	bl	800145c <HAL_RCC_GetHCLKFreq>
 800147c:	4601      	mov	r1, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	0a9b      	lsrs	r3, r3, #10
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	08004b68 	.word	0x08004b68

0800149c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014a0:	f7ff ffdc 	bl	800145c <HAL_RCC_GetHCLKFreq>
 80014a4:	4601      	mov	r1, r0
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	0b5b      	lsrs	r3, r3, #13
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	4a03      	ldr	r2, [pc, #12]	; (80014c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014b2:	5cd3      	ldrb	r3, [r2, r3]
 80014b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	08004b68 	.word	0x08004b68

080014c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	220f      	movs	r2, #15
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_RCC_GetClockConfig+0x5c>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0203 	and.w	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_RCC_GetClockConfig+0x5c>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_RCC_GetClockConfig+0x5c>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_RCC_GetClockConfig+0x5c>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	08db      	lsrs	r3, r3, #3
 80014fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_RCC_GetClockConfig+0x60>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 020f 	and.w	r2, r3, #15
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	601a      	str	r2, [r3, #0]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	40023c00 	.word	0x40023c00

08001528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e056      	b.n	80015e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d106      	bne.n	800155a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f002 ffb3 	bl	80044c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001570:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	ea42 0103 	orr.w	r1, r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	0c1b      	lsrs	r3, r3, #16
 80015b8:	f003 0104 	and.w	r1, r3, #4
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e01d      	b.n	800163e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f002 fff2 	bl	8004600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3304      	adds	r3, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f000 fb06 	bl	8001c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b06      	cmp	r3, #6
 800166e:	d007      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e01d      	b.n	80016dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d106      	bne.n	80016ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f002 ff6b 	bl	8004590 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2202      	movs	r2, #2
 80016be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3304      	adds	r3, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f000 fab7 	bl	8001c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d122      	bne.n	8001740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b02      	cmp	r3, #2
 8001706:	d11b      	bne.n	8001740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f06f 0202 	mvn.w	r2, #2
 8001710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fa6b 	bl	8001c02 <HAL_TIM_IC_CaptureCallback>
 800172c:	e005      	b.n	800173a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fa5d 	bl	8001bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fa6e 	bl	8001c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b04      	cmp	r3, #4
 800174c:	d122      	bne.n	8001794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b04      	cmp	r3, #4
 800175a:	d11b      	bne.n	8001794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0204 	mvn.w	r2, #4
 8001764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2202      	movs	r2, #2
 800176a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fa41 	bl	8001c02 <HAL_TIM_IC_CaptureCallback>
 8001780:	e005      	b.n	800178e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fa33 	bl	8001bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 fa44 	bl	8001c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d122      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d11b      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0208 	mvn.w	r2, #8
 80017b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2204      	movs	r2, #4
 80017be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa17 	bl	8001c02 <HAL_TIM_IC_CaptureCallback>
 80017d4:	e005      	b.n	80017e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fa09 	bl	8001bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fa1a 	bl	8001c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d122      	bne.n	800183c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	2b10      	cmp	r3, #16
 8001802:	d11b      	bne.n	800183c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0210 	mvn.w	r2, #16
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2208      	movs	r2, #8
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f9ed 	bl	8001c02 <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f9df 	bl	8001bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f9f0 	bl	8001c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10e      	bne.n	8001868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b01      	cmp	r3, #1
 8001856:	d107      	bne.n	8001868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0201 	mvn.w	r2, #1
 8001860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f002 fd9e 	bl	80043a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	2b80      	cmp	r3, #128	; 0x80
 8001874:	d10e      	bne.n	8001894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001880:	2b80      	cmp	r3, #128	; 0x80
 8001882:	d107      	bne.n	8001894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800188c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fd1d 	bl	80022ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	2b40      	cmp	r3, #64	; 0x40
 80018a0:	d10e      	bne.n	80018c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ac:	2b40      	cmp	r3, #64	; 0x40
 80018ae:	d107      	bne.n	80018c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f9b5 	bl	8001c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d10e      	bne.n	80018ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d107      	bne.n	80018ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f06f 0220 	mvn.w	r2, #32
 80018e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fce7 	bl	80022ba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800190a:	2302      	movs	r3, #2
 800190c:	e0b4      	b.n	8001a78 <HAL_TIM_PWM_ConfigChannel+0x184>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2202      	movs	r2, #2
 800191a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0c      	cmp	r3, #12
 8001922:	f200 809f 	bhi.w	8001a64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001926:	a201      	add	r2, pc, #4	; (adr r2, 800192c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	08001961 	.word	0x08001961
 8001930:	08001a65 	.word	0x08001a65
 8001934:	08001a65 	.word	0x08001a65
 8001938:	08001a65 	.word	0x08001a65
 800193c:	080019a1 	.word	0x080019a1
 8001940:	08001a65 	.word	0x08001a65
 8001944:	08001a65 	.word	0x08001a65
 8001948:	08001a65 	.word	0x08001a65
 800194c:	080019e3 	.word	0x080019e3
 8001950:	08001a65 	.word	0x08001a65
 8001954:	08001a65 	.word	0x08001a65
 8001958:	08001a65 	.word	0x08001a65
 800195c:	08001a23 	.word	0x08001a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f9ea 	bl	8001d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0208 	orr.w	r2, r2, #8
 800197a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0204 	bic.w	r2, r2, #4
 800198a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6999      	ldr	r1, [r3, #24]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	619a      	str	r2, [r3, #24]
      break;
 800199e:	e062      	b.n	8001a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fa30 	bl	8001e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6999      	ldr	r1, [r3, #24]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	021a      	lsls	r2, r3, #8
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	619a      	str	r2, [r3, #24]
      break;
 80019e0:	e041      	b.n	8001a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fa7b 	bl	8001ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0208 	orr.w	r2, r2, #8
 80019fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69da      	ldr	r2, [r3, #28]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0204 	bic.w	r2, r2, #4
 8001a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69d9      	ldr	r1, [r3, #28]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	61da      	str	r2, [r3, #28]
      break;
 8001a20:	e021      	b.n	8001a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fac5 	bl	8001fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	69da      	ldr	r2, [r3, #28]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69da      	ldr	r2, [r3, #28]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69d9      	ldr	r1, [r3, #28]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	021a      	lsls	r2, r3, #8
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	61da      	str	r2, [r3, #28]
      break;
 8001a62:	e000      	b.n	8001a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001a64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_TIM_ConfigClockSource+0x18>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e0a6      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x166>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001abe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b40      	cmp	r3, #64	; 0x40
 8001ace:	d067      	beq.n	8001ba0 <HAL_TIM_ConfigClockSource+0x120>
 8001ad0:	2b40      	cmp	r3, #64	; 0x40
 8001ad2:	d80b      	bhi.n	8001aec <HAL_TIM_ConfigClockSource+0x6c>
 8001ad4:	2b10      	cmp	r3, #16
 8001ad6:	d073      	beq.n	8001bc0 <HAL_TIM_ConfigClockSource+0x140>
 8001ad8:	2b10      	cmp	r3, #16
 8001ada:	d802      	bhi.n	8001ae2 <HAL_TIM_ConfigClockSource+0x62>
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d06f      	beq.n	8001bc0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001ae0:	e078      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	d06c      	beq.n	8001bc0 <HAL_TIM_ConfigClockSource+0x140>
 8001ae6:	2b30      	cmp	r3, #48	; 0x30
 8001ae8:	d06a      	beq.n	8001bc0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001aea:	e073      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001aec:	2b70      	cmp	r3, #112	; 0x70
 8001aee:	d00d      	beq.n	8001b0c <HAL_TIM_ConfigClockSource+0x8c>
 8001af0:	2b70      	cmp	r3, #112	; 0x70
 8001af2:	d804      	bhi.n	8001afe <HAL_TIM_ConfigClockSource+0x7e>
 8001af4:	2b50      	cmp	r3, #80	; 0x50
 8001af6:	d033      	beq.n	8001b60 <HAL_TIM_ConfigClockSource+0xe0>
 8001af8:	2b60      	cmp	r3, #96	; 0x60
 8001afa:	d041      	beq.n	8001b80 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001afc:	e06a      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b02:	d066      	beq.n	8001bd2 <HAL_TIM_ConfigClockSource+0x152>
 8001b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b08:	d017      	beq.n	8001b3a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001b0a:	e063      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6899      	ldr	r1, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f000 fb16 	bl	800214c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	609a      	str	r2, [r3, #8]
      break;
 8001b38:	e04c      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6899      	ldr	r1, [r3, #8]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f000 faff 	bl	800214c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b5c:	609a      	str	r2, [r3, #8]
      break;
 8001b5e:	e039      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f000 fa73 	bl	8002058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2150      	movs	r1, #80	; 0x50
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 facc 	bl	8002116 <TIM_ITRx_SetConfig>
      break;
 8001b7e:	e029      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f000 fa92 	bl	80020b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2160      	movs	r1, #96	; 0x60
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fabc 	bl	8002116 <TIM_ITRx_SetConfig>
      break;
 8001b9e:	e019      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f000 fa53 	bl	8002058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2140      	movs	r1, #64	; 0x40
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 faac 	bl	8002116 <TIM_ITRx_SetConfig>
      break;
 8001bbe:	e009      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f000 faa3 	bl	8002116 <TIM_ITRx_SetConfig>
      break;
 8001bd0:	e000      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001bd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <TIM_Base_SetConfig+0xe4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00f      	beq.n	8001c78 <TIM_Base_SetConfig+0x38>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5e:	d00b      	beq.n	8001c78 <TIM_Base_SetConfig+0x38>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a31      	ldr	r2, [pc, #196]	; (8001d28 <TIM_Base_SetConfig+0xe8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d007      	beq.n	8001c78 <TIM_Base_SetConfig+0x38>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a30      	ldr	r2, [pc, #192]	; (8001d2c <TIM_Base_SetConfig+0xec>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d003      	beq.n	8001c78 <TIM_Base_SetConfig+0x38>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a2f      	ldr	r2, [pc, #188]	; (8001d30 <TIM_Base_SetConfig+0xf0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d108      	bne.n	8001c8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a25      	ldr	r2, [pc, #148]	; (8001d24 <TIM_Base_SetConfig+0xe4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01b      	beq.n	8001cca <TIM_Base_SetConfig+0x8a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d017      	beq.n	8001cca <TIM_Base_SetConfig+0x8a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <TIM_Base_SetConfig+0xe8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <TIM_Base_SetConfig+0x8a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <TIM_Base_SetConfig+0xec>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00f      	beq.n	8001cca <TIM_Base_SetConfig+0x8a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <TIM_Base_SetConfig+0xf0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00b      	beq.n	8001cca <TIM_Base_SetConfig+0x8a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <TIM_Base_SetConfig+0xf4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <TIM_Base_SetConfig+0x8a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <TIM_Base_SetConfig+0xf8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d003      	beq.n	8001cca <TIM_Base_SetConfig+0x8a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <TIM_Base_SetConfig+0xfc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d108      	bne.n	8001cdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <TIM_Base_SetConfig+0xe4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d103      	bne.n	8001d10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	615a      	str	r2, [r3, #20]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40014000 	.word	0x40014000
 8001d38:	40014400 	.word	0x40014400
 8001d3c:	40014800 	.word	0x40014800

08001d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	f023 0201 	bic.w	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0303 	bic.w	r3, r3, #3
 8001d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f023 0302 	bic.w	r3, r3, #2
 8001d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <TIM_OC1_SetConfig+0xc8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d10c      	bne.n	8001db6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f023 0308 	bic.w	r3, r3, #8
 8001da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <TIM_OC1_SetConfig+0xc8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d111      	bne.n	8001de2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	621a      	str	r2, [r3, #32]
}
 8001dfc:	bf00      	nop
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40010000 	.word	0x40010000

08001e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f023 0210 	bic.w	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f023 0320 	bic.w	r3, r3, #32
 8001e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <TIM_OC2_SetConfig+0xd4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d10d      	bne.n	8001e88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a15      	ldr	r2, [pc, #84]	; (8001ee0 <TIM_OC2_SetConfig+0xd4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d113      	bne.n	8001eb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	621a      	str	r2, [r3, #32]
}
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40010000 	.word	0x40010000

08001ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0303 	bic.w	r3, r3, #3
 8001f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <TIM_OC3_SetConfig+0xd0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d10d      	bne.n	8001f5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <TIM_OC3_SetConfig+0xd0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d113      	bne.n	8001f8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	621a      	str	r2, [r3, #32]
}
 8001fa8:	bf00      	nop
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40010000 	.word	0x40010000

08001fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	031b      	lsls	r3, r3, #12
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a10      	ldr	r2, [pc, #64]	; (8002054 <TIM_OC4_SetConfig+0x9c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d109      	bne.n	800202c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800201e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	019b      	lsls	r3, r3, #6
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	621a      	str	r2, [r3, #32]
}
 8002046:	bf00      	nop
 8002048:	371c      	adds	r7, #28
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40010000 	.word	0x40010000

08002058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f023 0201 	bic.w	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f023 030a 	bic.w	r3, r3, #10
 8002094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	621a      	str	r2, [r3, #32]
}
 80020aa:	bf00      	nop
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b087      	sub	sp, #28
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f023 0210 	bic.w	r2, r3, #16
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	031b      	lsls	r3, r3, #12
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	621a      	str	r2, [r3, #32]
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	f043 0307 	orr.w	r3, r3, #7
 8002138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	609a      	str	r2, [r3, #8]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	021a      	lsls	r2, r3, #8
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	431a      	orrs	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	609a      	str	r2, [r3, #8]
}
 8002180:	bf00      	nop
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e032      	b.n	800220a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021dc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800222e:	2302      	movs	r3, #2
 8002230:	e03d      	b.n	80022ae <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4313      	orrs	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e03f      	b.n	8002374 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f002 fa3f 	bl	800478c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2224      	movs	r2, #36	; 0x24
 8002312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002324:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f828 	bl	800237c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800233a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800234a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800235a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800237c:	b5b0      	push	{r4, r5, r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80023bc:	f023 030c 	bic.w	r3, r3, #12
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	68f9      	ldr	r1, [r7, #12]
 80023c6:	430b      	orrs	r3, r1
 80023c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e8:	f040 80e4 	bne.w	80025b4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4aab      	ldr	r2, [pc, #684]	; (80026a0 <UART_SetConfig+0x324>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d004      	beq.n	8002400 <UART_SetConfig+0x84>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4aaa      	ldr	r2, [pc, #680]	; (80026a4 <UART_SetConfig+0x328>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d16c      	bne.n	80024da <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002400:	f7ff f84c 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 8002404:	4602      	mov	r2, r0
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	009a      	lsls	r2, r3, #2
 800240e:	441a      	add	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	4aa3      	ldr	r2, [pc, #652]	; (80026a8 <UART_SetConfig+0x32c>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	011c      	lsls	r4, r3, #4
 8002424:	f7ff f83a 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 8002428:	4602      	mov	r2, r0
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	009a      	lsls	r2, r3, #2
 8002432:	441a      	add	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fbb2 f5f3 	udiv	r5, r2, r3
 800243e:	f7ff f82d 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 8002442:	4602      	mov	r2, r0
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	009a      	lsls	r2, r3, #2
 800244c:	441a      	add	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	4a93      	ldr	r2, [pc, #588]	; (80026a8 <UART_SetConfig+0x32c>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2264      	movs	r2, #100	; 0x64
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	1aeb      	subs	r3, r5, r3
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	3332      	adds	r3, #50	; 0x32
 800246c:	4a8e      	ldr	r2, [pc, #568]	; (80026a8 <UART_SetConfig+0x32c>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800247a:	441c      	add	r4, r3
 800247c:	f7ff f80e 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 8002480:	4602      	mov	r2, r0
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	009a      	lsls	r2, r3, #2
 800248a:	441a      	add	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fbb2 f5f3 	udiv	r5, r2, r3
 8002496:	f7ff f801 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 800249a:	4602      	mov	r2, r0
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	009a      	lsls	r2, r3, #2
 80024a4:	441a      	add	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b0:	4a7d      	ldr	r2, [pc, #500]	; (80026a8 <UART_SetConfig+0x32c>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2264      	movs	r2, #100	; 0x64
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	1aeb      	subs	r3, r5, r3
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	3332      	adds	r3, #50	; 0x32
 80024c4:	4a78      	ldr	r2, [pc, #480]	; (80026a8 <UART_SetConfig+0x32c>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	f003 0207 	and.w	r2, r3, #7
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4422      	add	r2, r4
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	e154      	b.n	8002784 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024da:	f7fe ffcb 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	009a      	lsls	r2, r3, #2
 80024e8:	441a      	add	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	4a6c      	ldr	r2, [pc, #432]	; (80026a8 <UART_SetConfig+0x32c>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	011c      	lsls	r4, r3, #4
 80024fe:	f7fe ffb9 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 8002502:	4602      	mov	r2, r0
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009a      	lsls	r2, r3, #2
 800250c:	441a      	add	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fbb2 f5f3 	udiv	r5, r2, r3
 8002518:	f7fe ffac 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 800251c:	4602      	mov	r2, r0
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	441a      	add	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4a5d      	ldr	r2, [pc, #372]	; (80026a8 <UART_SetConfig+0x32c>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	2264      	movs	r2, #100	; 0x64
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	1aeb      	subs	r3, r5, r3
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	3332      	adds	r3, #50	; 0x32
 8002546:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <UART_SetConfig+0x32c>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002554:	441c      	add	r4, r3
 8002556:	f7fe ff8d 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 800255a:	4602      	mov	r2, r0
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	009a      	lsls	r2, r3, #2
 8002564:	441a      	add	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002570:	f7fe ff80 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 8002574:	4602      	mov	r2, r0
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	009a      	lsls	r2, r3, #2
 800257e:	441a      	add	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4a47      	ldr	r2, [pc, #284]	; (80026a8 <UART_SetConfig+0x32c>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	2264      	movs	r2, #100	; 0x64
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	1aeb      	subs	r3, r5, r3
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	3332      	adds	r3, #50	; 0x32
 800259e:	4a42      	ldr	r2, [pc, #264]	; (80026a8 <UART_SetConfig+0x32c>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	f003 0207 	and.w	r2, r3, #7
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4422      	add	r2, r4
 80025b0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80025b2:	e0e7      	b.n	8002784 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a39      	ldr	r2, [pc, #228]	; (80026a0 <UART_SetConfig+0x324>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d004      	beq.n	80025c8 <UART_SetConfig+0x24c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a38      	ldr	r2, [pc, #224]	; (80026a4 <UART_SetConfig+0x328>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d171      	bne.n	80026ac <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80025c8:	f7fe ff68 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	009a      	lsls	r2, r3, #2
 80025d6:	441a      	add	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	4a31      	ldr	r2, [pc, #196]	; (80026a8 <UART_SetConfig+0x32c>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	011c      	lsls	r4, r3, #4
 80025ec:	f7fe ff56 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	009a      	lsls	r2, r3, #2
 80025fa:	441a      	add	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	fbb2 f5f3 	udiv	r5, r2, r3
 8002606:	f7fe ff49 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 800260a:	4602      	mov	r2, r0
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009a      	lsls	r2, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <UART_SetConfig+0x32c>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2264      	movs	r2, #100	; 0x64
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	1aeb      	subs	r3, r5, r3
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	3332      	adds	r3, #50	; 0x32
 8002634:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <UART_SetConfig+0x32c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002640:	441c      	add	r4, r3
 8002642:	f7fe ff2b 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 8002646:	4602      	mov	r2, r0
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009a      	lsls	r2, r3, #2
 8002650:	441a      	add	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fbb2 f5f3 	udiv	r5, r2, r3
 800265c:	f7fe ff1e 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 8002660:	4602      	mov	r2, r0
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	009a      	lsls	r2, r3, #2
 800266a:	441a      	add	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	fbb2 f3f3 	udiv	r3, r2, r3
 8002676:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <UART_SetConfig+0x32c>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	2264      	movs	r2, #100	; 0x64
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	1aeb      	subs	r3, r5, r3
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	3332      	adds	r3, #50	; 0x32
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <UART_SetConfig+0x32c>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	f003 020f 	and.w	r2, r3, #15
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4422      	add	r2, r4
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	e071      	b.n	8002784 <UART_SetConfig+0x408>
 80026a0:	40011000 	.word	0x40011000
 80026a4:	40011400 	.word	0x40011400
 80026a8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026ac:	f7fe fee2 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009a      	lsls	r2, r3, #2
 80026ba:	441a      	add	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4a31      	ldr	r2, [pc, #196]	; (800278c <UART_SetConfig+0x410>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	011c      	lsls	r4, r3, #4
 80026d0:	f7fe fed0 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009a      	lsls	r2, r3, #2
 80026de:	441a      	add	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80026ea:	f7fe fec3 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 80026ee:	4602      	mov	r2, r0
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	009a      	lsls	r2, r3, #2
 80026f8:	441a      	add	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	4a21      	ldr	r2, [pc, #132]	; (800278c <UART_SetConfig+0x410>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2264      	movs	r2, #100	; 0x64
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	1aeb      	subs	r3, r5, r3
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	3332      	adds	r3, #50	; 0x32
 8002718:	4a1c      	ldr	r2, [pc, #112]	; (800278c <UART_SetConfig+0x410>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002724:	441c      	add	r4, r3
 8002726:	f7fe fea5 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 800272a:	4602      	mov	r2, r0
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	009a      	lsls	r2, r3, #2
 8002734:	441a      	add	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002740:	f7fe fe98 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 8002744:	4602      	mov	r2, r0
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	009a      	lsls	r2, r3, #2
 800274e:	441a      	add	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <UART_SetConfig+0x410>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	2264      	movs	r2, #100	; 0x64
 8002764:	fb02 f303 	mul.w	r3, r2, r3
 8002768:	1aeb      	subs	r3, r5, r3
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	3332      	adds	r3, #50	; 0x32
 800276e:	4a07      	ldr	r2, [pc, #28]	; (800278c <UART_SetConfig+0x410>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	f003 020f 	and.w	r2, r3, #15
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4422      	add	r2, r4
 8002780:	609a      	str	r2, [r3, #8]
}
 8002782:	e7ff      	b.n	8002784 <UART_SetConfig+0x408>
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bdb0      	pop	{r4, r5, r7, pc}
 800278c:	51eb851f 	.word	0x51eb851f

08002790 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800279e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a2:	2b84      	cmp	r3, #132	; 0x84
 80027a4:	d005      	beq.n	80027b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80027a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4413      	add	r3, r2
 80027ae:	3303      	adds	r3, #3
 80027b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80027c4:	f000 fad2 	bl	8002d6c <vTaskStartScheduler>
  
  return osOK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	bd80      	pop	{r7, pc}

080027ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80027ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d0:	b089      	sub	sp, #36	; 0x24
 80027d2:	af04      	add	r7, sp, #16
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <osThreadCreate+0x54>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01c      	beq.n	8002822 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685c      	ldr	r4, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681d      	ldr	r5, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691e      	ldr	r6, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ffc8 	bl	8002790 <makeFreeRtosPriority>
 8002800:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800280a:	9202      	str	r2, [sp, #8]
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	9100      	str	r1, [sp, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4632      	mov	r2, r6
 8002814:	4629      	mov	r1, r5
 8002816:	4620      	mov	r0, r4
 8002818:	f000 f8ed 	bl	80029f6 <xTaskCreateStatic>
 800281c:	4603      	mov	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e01c      	b.n	800285c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685c      	ldr	r4, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800282e:	b29e      	uxth	r6, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ffaa 	bl	8002790 <makeFreeRtosPriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	9200      	str	r2, [sp, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	4632      	mov	r2, r6
 800284a:	4629      	mov	r1, r5
 800284c:	4620      	mov	r0, r4
 800284e:	f000 f92b 	bl	8002aa8 <xTaskCreate>
 8002852:	4603      	mov	r3, r0
 8002854:	2b01      	cmp	r3, #1
 8002856:	d001      	beq.n	800285c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800285c:	68fb      	ldr	r3, [r7, #12]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002866 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <osDelay+0x16>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	e000      	b.n	800287e <osDelay+0x18>
 800287c:	2301      	movs	r3, #1
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fa40 	bl	8002d04 <vTaskDelay>
  
  return osOK;
 8002884:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f103 0208 	add.w	r2, r3, #8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f04f 32ff 	mov.w	r2, #4294967295
 80028a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f103 0208 	add.w	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f103 0208 	add.w	r2, r3, #8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	601a      	str	r2, [r3, #0]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d103      	bne.n	8002950 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e00c      	b.n	800296a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3308      	adds	r3, #8
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e002      	b.n	800295e <vListInsert+0x2e>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	429a      	cmp	r2, r3
 8002968:	d2f6      	bcs.n	8002958 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	601a      	str	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6852      	ldr	r2, [r2, #4]
 80029c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d103      	bne.n	80029d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	1e5a      	subs	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b08e      	sub	sp, #56	; 0x38
 80029fa:	af04      	add	r7, sp, #16
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	623b      	str	r3, [r7, #32]
 8002a1c:	e7fe      	b.n	8002a1c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <xTaskCreateStatic+0x42>
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e7fe      	b.n	8002a36 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a38:	2354      	movs	r3, #84	; 0x54
 8002a3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b54      	cmp	r3, #84	; 0x54
 8002a40:	d009      	beq.n	8002a56 <xTaskCreateStatic+0x60>
 8002a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a46:	f383 8811 	msr	BASEPRI, r3
 8002a4a:	f3bf 8f6f 	isb	sy
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	61bb      	str	r3, [r7, #24]
 8002a54:	e7fe      	b.n	8002a54 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01e      	beq.n	8002a9a <xTaskCreateStatic+0xa4>
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01b      	beq.n	8002a9a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a74:	2300      	movs	r3, #0
 8002a76:	9303      	str	r3, [sp, #12]
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	9302      	str	r3, [sp, #8]
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f850 	bl	8002b32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a94:	f000 f8cc 	bl	8002c30 <prvAddNewTaskToReadyList>
 8002a98:	e001      	b.n	8002a9e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a9e:	697b      	ldr	r3, [r7, #20]
	}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3728      	adds	r7, #40	; 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af04      	add	r7, sp, #16
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 feb1 	bl	8003824 <pvPortMalloc>
 8002ac2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00e      	beq.n	8002ae8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002aca:	2054      	movs	r0, #84	; 0x54
 8002acc:	f000 feaa 	bl	8003824 <pvPortMalloc>
 8002ad0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ade:	e005      	b.n	8002aec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	f000 ff61 	bl	80039a8 <vPortFree>
 8002ae6:	e001      	b.n	8002aec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	2300      	movs	r3, #0
 8002afe:	9303      	str	r3, [sp, #12]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f80e 	bl	8002b32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b16:	69f8      	ldr	r0, [r7, #28]
 8002b18:	f000 f88a 	bl	8002c30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e002      	b.n	8002b28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b28:	69bb      	ldr	r3, [r7, #24]
	}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b088      	sub	sp, #32
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f023 0307 	bic.w	r3, r3, #7
 8002b58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d009      	beq.n	8002b78 <prvInitialiseNewTask+0x46>
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e7fe      	b.n	8002b76 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	e012      	b.n	8002ba4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	7819      	ldrb	r1, [r3, #0]
 8002b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3334      	adds	r3, #52	; 0x34
 8002b8e:	460a      	mov	r2, r1
 8002b90:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d006      	beq.n	8002bac <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b0f      	cmp	r3, #15
 8002ba8:	d9e9      	bls.n	8002b7e <prvInitialiseNewTask+0x4c>
 8002baa:	e000      	b.n	8002bae <prvInitialiseNewTask+0x7c>
		{
			break;
 8002bac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	2b06      	cmp	r3, #6
 8002bba:	d901      	bls.n	8002bc0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bbc:	2306      	movs	r3, #6
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	2200      	movs	r2, #0
 8002bd0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fe79 	bl	80028ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	3318      	adds	r3, #24
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fe74 	bl	80028ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	f1c3 0207 	rsb	r2, r3, #7
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	2200      	movs	r2, #0
 8002c00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	69b8      	ldr	r0, [r7, #24]
 8002c10:	f000 fc08 	bl	8003424 <pxPortInitialiseStack>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c38:	f000 fd18 	bl	800366c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <prvAddNewTaskToReadyList+0xb8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	4a29      	ldr	r2, [pc, #164]	; (8002ce8 <prvAddNewTaskToReadyList+0xb8>)
 8002c44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c46:	4b29      	ldr	r3, [pc, #164]	; (8002cec <prvAddNewTaskToReadyList+0xbc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c4e:	4a27      	ldr	r2, [pc, #156]	; (8002cec <prvAddNewTaskToReadyList+0xbc>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <prvAddNewTaskToReadyList+0xb8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d110      	bne.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c5c:	f000 fabc 	bl	80031d8 <prvInitialiseTaskLists>
 8002c60:	e00d      	b.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c62:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <prvAddNewTaskToReadyList+0xc0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <prvAddNewTaskToReadyList+0xbc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d802      	bhi.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <prvAddNewTaskToReadyList+0xbc>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <prvAddNewTaskToReadyList+0xc4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <prvAddNewTaskToReadyList+0xc4>)
 8002c86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <prvAddNewTaskToReadyList+0xcc>)
 8002ca8:	441a      	add	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7ff fe19 	bl	80028e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002cb6:	f000 fd07 	bl	80036c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <prvAddNewTaskToReadyList+0xc0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00e      	beq.n	8002ce0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <prvAddNewTaskToReadyList+0xbc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d207      	bcs.n	8002ce0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <prvAddNewTaskToReadyList+0xd0>)
 8002cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000128 	.word	0x20000128
 8002cec:	20000028 	.word	0x20000028
 8002cf0:	20000134 	.word	0x20000134
 8002cf4:	20000144 	.word	0x20000144
 8002cf8:	20000130 	.word	0x20000130
 8002cfc:	2000002c 	.word	0x2000002c
 8002d00:	e000ed04 	.word	0xe000ed04

08002d04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <vTaskDelay+0x60>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <vTaskDelay+0x2e>
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	e7fe      	b.n	8002d30 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002d32:	f000 f879 	bl	8002e28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d36:	2100      	movs	r1, #0
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fb0d 	bl	8003358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d3e:	f000 f881 	bl	8002e44 <xTaskResumeAll>
 8002d42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d107      	bne.n	8002d5a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <vTaskDelay+0x64>)
 8002d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000150 	.word	0x20000150
 8002d68:	e000ed04 	.word	0xe000ed04

08002d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d7a:	463a      	mov	r2, r7
 8002d7c:	1d39      	adds	r1, r7, #4
 8002d7e:	f107 0308 	add.w	r3, r7, #8
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 ff24 	bl	8003bd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d88:	6839      	ldr	r1, [r7, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	9202      	str	r2, [sp, #8]
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	2300      	movs	r3, #0
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2300      	movs	r3, #0
 8002d98:	460a      	mov	r2, r1
 8002d9a:	491d      	ldr	r1, [pc, #116]	; (8002e10 <vTaskStartScheduler+0xa4>)
 8002d9c:	481d      	ldr	r0, [pc, #116]	; (8002e14 <vTaskStartScheduler+0xa8>)
 8002d9e:	f7ff fe2a 	bl	80029f6 <xTaskCreateStatic>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <vTaskStartScheduler+0xac>)
 8002da6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <vTaskStartScheduler+0xac>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002db0:	2301      	movs	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e001      	b.n	8002dba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d115      	bne.n	8002dec <vTaskStartScheduler+0x80>
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <vTaskStartScheduler+0xb0>)
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <vTaskStartScheduler+0xb4>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <vTaskStartScheduler+0xb8>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002de6:	f000 fba3 	bl	8003530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dea:	e00d      	b.n	8002e08 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d109      	bne.n	8002e08 <vTaskStartScheduler+0x9c>
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e7fe      	b.n	8002e06 <vTaskStartScheduler+0x9a>
}
 8002e08:	bf00      	nop
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	08004ab0 	.word	0x08004ab0
 8002e14:	080031a9 	.word	0x080031a9
 8002e18:	2000014c 	.word	0x2000014c
 8002e1c:	20000148 	.word	0x20000148
 8002e20:	20000134 	.word	0x20000134
 8002e24:	2000012c 	.word	0x2000012c

08002e28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <vTaskSuspendAll+0x18>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	4a03      	ldr	r2, [pc, #12]	; (8002e40 <vTaskSuspendAll+0x18>)
 8002e34:	6013      	str	r3, [r2, #0]
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	20000150 	.word	0x20000150

08002e44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <xTaskResumeAll+0x114>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <xTaskResumeAll+0x2a>
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	e7fe      	b.n	8002e6c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e6e:	f000 fbfd 	bl	800366c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <xTaskResumeAll+0x114>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	4a37      	ldr	r2, [pc, #220]	; (8002f58 <xTaskResumeAll+0x114>)
 8002e7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e7c:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <xTaskResumeAll+0x114>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d161      	bne.n	8002f48 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e84:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <xTaskResumeAll+0x118>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d05d      	beq.n	8002f48 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e8c:	e02e      	b.n	8002eec <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e8e:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <xTaskResumeAll+0x11c>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3318      	adds	r3, #24
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fd81 	bl	80029a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fd7c 	bl	80029a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	2201      	movs	r2, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <xTaskResumeAll+0x120>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	4a2a      	ldr	r2, [pc, #168]	; (8002f64 <xTaskResumeAll+0x120>)
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <xTaskResumeAll+0x124>)
 8002eca:	441a      	add	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f7ff fd08 	bl	80028e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <xTaskResumeAll+0x128>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002ee6:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <xTaskResumeAll+0x12c>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eec:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <xTaskResumeAll+0x11c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1cc      	bne.n	8002e8e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002efa:	f000 fa07 	bl	800330c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <xTaskResumeAll+0x130>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d010      	beq.n	8002f2c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f0a:	f000 f837 	bl	8002f7c <xTaskIncrementTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <xTaskResumeAll+0x12c>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f1      	bne.n	8002f0a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <xTaskResumeAll+0x130>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f2c:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <xTaskResumeAll+0x12c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <xTaskResumeAll+0x134>)
 8002f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f48:	f000 fbbe 	bl	80036c8 <vPortExitCritical>

	return xAlreadyYielded;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000150 	.word	0x20000150
 8002f5c:	20000128 	.word	0x20000128
 8002f60:	200000e8 	.word	0x200000e8
 8002f64:	20000130 	.word	0x20000130
 8002f68:	2000002c 	.word	0x2000002c
 8002f6c:	20000028 	.word	0x20000028
 8002f70:	2000013c 	.word	0x2000013c
 8002f74:	20000138 	.word	0x20000138
 8002f78:	e000ed04 	.word	0xe000ed04

08002f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f86:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <xTaskIncrementTick+0x14c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 808c 	bne.w	80030a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f90:	4b4e      	ldr	r3, [pc, #312]	; (80030cc <xTaskIncrementTick+0x150>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f98:	4a4c      	ldr	r2, [pc, #304]	; (80030cc <xTaskIncrementTick+0x150>)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11f      	bne.n	8002fe4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fa4:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <xTaskIncrementTick+0x154>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <xTaskIncrementTick+0x46>
 8002fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	e7fe      	b.n	8002fc0 <xTaskIncrementTick+0x44>
 8002fc2:	4b43      	ldr	r3, [pc, #268]	; (80030d0 <xTaskIncrementTick+0x154>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	4b42      	ldr	r3, [pc, #264]	; (80030d4 <xTaskIncrementTick+0x158>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a40      	ldr	r2, [pc, #256]	; (80030d0 <xTaskIncrementTick+0x154>)
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4a40      	ldr	r2, [pc, #256]	; (80030d4 <xTaskIncrementTick+0x158>)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <xTaskIncrementTick+0x15c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	4a3e      	ldr	r2, [pc, #248]	; (80030d8 <xTaskIncrementTick+0x15c>)
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	f000 f994 	bl	800330c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <xTaskIncrementTick+0x160>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d34d      	bcc.n	800308a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fee:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <xTaskIncrementTick+0x154>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <xTaskIncrementTick+0x80>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <xTaskIncrementTick+0x82>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003002:	4b36      	ldr	r3, [pc, #216]	; (80030dc <xTaskIncrementTick+0x160>)
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	601a      	str	r2, [r3, #0]
					break;
 800300a:	e03e      	b.n	800308a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800300c:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <xTaskIncrementTick+0x154>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d203      	bcs.n	800302c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003024:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <xTaskIncrementTick+0x160>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6013      	str	r3, [r2, #0]
						break;
 800302a:	e02e      	b.n	800308a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	3304      	adds	r3, #4
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fcb6 	bl	80029a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	3318      	adds	r3, #24
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fcad 	bl	80029a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	2201      	movs	r2, #1
 800304e:	409a      	lsls	r2, r3
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <xTaskIncrementTick+0x164>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4313      	orrs	r3, r2
 8003056:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <xTaskIncrementTick+0x164>)
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <xTaskIncrementTick+0x168>)
 8003068:	441a      	add	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3304      	adds	r3, #4
 800306e:	4619      	mov	r1, r3
 8003070:	4610      	mov	r0, r2
 8003072:	f7ff fc39 	bl	80028e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <xTaskIncrementTick+0x16c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	429a      	cmp	r2, r3
 8003082:	d3b4      	bcc.n	8002fee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003084:	2301      	movs	r3, #1
 8003086:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003088:	e7b1      	b.n	8002fee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800308a:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <xTaskIncrementTick+0x16c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	4914      	ldr	r1, [pc, #80]	; (80030e4 <xTaskIncrementTick+0x168>)
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d907      	bls.n	80030b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80030a2:	2301      	movs	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e004      	b.n	80030b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80030a8:	4b10      	ldr	r3, [pc, #64]	; (80030ec <xTaskIncrementTick+0x170>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	4a0f      	ldr	r2, [pc, #60]	; (80030ec <xTaskIncrementTick+0x170>)
 80030b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <xTaskIncrementTick+0x174>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030be:	697b      	ldr	r3, [r7, #20]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000150 	.word	0x20000150
 80030cc:	2000012c 	.word	0x2000012c
 80030d0:	200000e0 	.word	0x200000e0
 80030d4:	200000e4 	.word	0x200000e4
 80030d8:	20000140 	.word	0x20000140
 80030dc:	20000148 	.word	0x20000148
 80030e0:	20000130 	.word	0x20000130
 80030e4:	2000002c 	.word	0x2000002c
 80030e8:	20000028 	.word	0x20000028
 80030ec:	20000138 	.word	0x20000138
 80030f0:	2000013c 	.word	0x2000013c

080030f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <vTaskSwitchContext+0xa0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <vTaskSwitchContext+0xa4>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003108:	e03e      	b.n	8003188 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800310a:	4b23      	ldr	r3, [pc, #140]	; (8003198 <vTaskSwitchContext+0xa4>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003110:	4b22      	ldr	r3, [pc, #136]	; (800319c <vTaskSwitchContext+0xa8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	f1c3 031f 	rsb	r3, r3, #31
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	491e      	ldr	r1, [pc, #120]	; (80031a0 <vTaskSwitchContext+0xac>)
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <vTaskSwitchContext+0x5a>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	e7fe      	b.n	800314c <vTaskSwitchContext+0x58>
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4a11      	ldr	r2, [pc, #68]	; (80031a0 <vTaskSwitchContext+0xac>)
 800315a:	4413      	add	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	3308      	adds	r3, #8
 8003170:	429a      	cmp	r2, r3
 8003172:	d104      	bne.n	800317e <vTaskSwitchContext+0x8a>
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a07      	ldr	r2, [pc, #28]	; (80031a4 <vTaskSwitchContext+0xb0>)
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	20000150 	.word	0x20000150
 8003198:	2000013c 	.word	0x2000013c
 800319c:	20000130 	.word	0x20000130
 80031a0:	2000002c 	.word	0x2000002c
 80031a4:	20000028 	.word	0x20000028

080031a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031b0:	f000 f852 	bl	8003258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <prvIdleTask+0x28>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d9f9      	bls.n	80031b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <prvIdleTask+0x2c>)
 80031be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031cc:	e7f0      	b.n	80031b0 <prvIdleTask+0x8>
 80031ce:	bf00      	nop
 80031d0:	2000002c 	.word	0x2000002c
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	e00c      	b.n	80031fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <prvInitialiseTaskLists+0x60>)
 80031f0:	4413      	add	r3, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fb4b 	bl	800288e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b06      	cmp	r3, #6
 8003202:	d9ef      	bls.n	80031e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003204:	480d      	ldr	r0, [pc, #52]	; (800323c <prvInitialiseTaskLists+0x64>)
 8003206:	f7ff fb42 	bl	800288e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800320a:	480d      	ldr	r0, [pc, #52]	; (8003240 <prvInitialiseTaskLists+0x68>)
 800320c:	f7ff fb3f 	bl	800288e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003210:	480c      	ldr	r0, [pc, #48]	; (8003244 <prvInitialiseTaskLists+0x6c>)
 8003212:	f7ff fb3c 	bl	800288e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003216:	480c      	ldr	r0, [pc, #48]	; (8003248 <prvInitialiseTaskLists+0x70>)
 8003218:	f7ff fb39 	bl	800288e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800321c:	480b      	ldr	r0, [pc, #44]	; (800324c <prvInitialiseTaskLists+0x74>)
 800321e:	f7ff fb36 	bl	800288e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <prvInitialiseTaskLists+0x78>)
 8003224:	4a05      	ldr	r2, [pc, #20]	; (800323c <prvInitialiseTaskLists+0x64>)
 8003226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <prvInitialiseTaskLists+0x7c>)
 800322a:	4a05      	ldr	r2, [pc, #20]	; (8003240 <prvInitialiseTaskLists+0x68>)
 800322c:	601a      	str	r2, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	2000002c 	.word	0x2000002c
 800323c:	200000b8 	.word	0x200000b8
 8003240:	200000cc 	.word	0x200000cc
 8003244:	200000e8 	.word	0x200000e8
 8003248:	200000fc 	.word	0x200000fc
 800324c:	20000114 	.word	0x20000114
 8003250:	200000e0 	.word	0x200000e0
 8003254:	200000e4 	.word	0x200000e4

08003258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800325e:	e019      	b.n	8003294 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003260:	f000 fa04 	bl	800366c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <prvCheckTasksWaitingTermination+0x4c>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fb96 	bl	80029a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <prvCheckTasksWaitingTermination+0x50>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3b01      	subs	r3, #1
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <prvCheckTasksWaitingTermination+0x50>)
 800327e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003288:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800328a:	f000 fa1d 	bl	80036c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f80e 	bl	80032b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e1      	bne.n	8003260 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200000fc 	.word	0x200000fc
 80032a8:	20000128 	.word	0x20000128
 80032ac:	20000110 	.word	0x20000110

080032b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d108      	bne.n	80032d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fb6e 	bl	80039a8 <vPortFree>
				vPortFree( pxTCB );
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fb6b 	bl	80039a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032d2:	e017      	b.n	8003304 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d103      	bne.n	80032e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fb62 	bl	80039a8 <vPortFree>
	}
 80032e4:	e00e      	b.n	8003304 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d009      	beq.n	8003304 <prvDeleteTCB+0x54>
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e7fe      	b.n	8003302 <prvDeleteTCB+0x52>
	}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <prvResetNextTaskUnblockTime+0x44>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <prvResetNextTaskUnblockTime+0x14>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <prvResetNextTaskUnblockTime+0x16>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <prvResetNextTaskUnblockTime+0x48>)
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800332e:	e008      	b.n	8003342 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <prvResetNextTaskUnblockTime+0x44>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <prvResetNextTaskUnblockTime+0x48>)
 8003340:	6013      	str	r3, [r2, #0]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	200000e0 	.word	0x200000e0
 8003354:	20000148 	.word	0x20000148

08003358 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003362:	4b29      	ldr	r3, [pc, #164]	; (8003408 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <prvAddCurrentTaskToDelayedList+0xb4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3304      	adds	r3, #4
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fb17 	bl	80029a2 <uxListRemove>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10b      	bne.n	8003392 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <prvAddCurrentTaskToDelayedList+0xb4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	2201      	movs	r2, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43da      	mvns	r2, r3
 8003388:	4b21      	ldr	r3, [pc, #132]	; (8003410 <prvAddCurrentTaskToDelayedList+0xb8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4013      	ands	r3, r2
 800338e:	4a20      	ldr	r2, [pc, #128]	; (8003410 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003390:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d10a      	bne.n	80033b0 <prvAddCurrentTaskToDelayedList+0x58>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <prvAddCurrentTaskToDelayedList+0xb4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4619      	mov	r1, r3
 80033a8:	481a      	ldr	r0, [pc, #104]	; (8003414 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033aa:	f7ff fa9d 	bl	80028e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033ae:	e026      	b.n	80033fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033b8:	4b14      	ldr	r3, [pc, #80]	; (800340c <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d209      	bcs.n	80033dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <prvAddCurrentTaskToDelayedList+0xc0>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b0f      	ldr	r3, [pc, #60]	; (800340c <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4619      	mov	r1, r3
 80033d4:	4610      	mov	r0, r2
 80033d6:	f7ff faab 	bl	8002930 <vListInsert>
}
 80033da:	e010      	b.n	80033fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <prvAddCurrentTaskToDelayedList+0xc4>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <prvAddCurrentTaskToDelayedList+0xb4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3304      	adds	r3, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f7ff faa1 	bl	8002930 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033ee:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d202      	bcs.n	80033fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80033f8:	4a09      	ldr	r2, [pc, #36]	; (8003420 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6013      	str	r3, [r2, #0]
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	2000012c 	.word	0x2000012c
 800340c:	20000028 	.word	0x20000028
 8003410:	20000130 	.word	0x20000130
 8003414:	20000114 	.word	0x20000114
 8003418:	200000e4 	.word	0x200000e4
 800341c:	200000e0 	.word	0x200000e0
 8003420:	20000148 	.word	0x20000148

08003424 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3b04      	subs	r3, #4
 8003434:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800343c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3b04      	subs	r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f023 0201 	bic.w	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3b04      	subs	r3, #4
 8003452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003454:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <pxPortInitialiseStack+0x64>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3b14      	subs	r3, #20
 800345e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3b04      	subs	r3, #4
 800346a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f06f 0202 	mvn.w	r2, #2
 8003472:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3b20      	subs	r3, #32
 8003478:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800347a:	68fb      	ldr	r3, [r7, #12]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	0800348d 	.word	0x0800348d

0800348c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <prvTaskExitError+0x50>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349e:	d009      	beq.n	80034b4 <prvTaskExitError+0x28>
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e7fe      	b.n	80034b2 <prvTaskExitError+0x26>
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034c6:	bf00      	nop
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0fc      	beq.n	80034c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000004 	.word	0x20000004

080034e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <pxCurrentTCBConst2>)
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	6808      	ldr	r0, [r1, #0]
 80034e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ea:	f380 8809 	msr	PSP, r0
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f380 8811 	msr	BASEPRI, r0
 80034fa:	4770      	bx	lr
 80034fc:	f3af 8000 	nop.w

08003500 <pxCurrentTCBConst2>:
 8003500:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop

08003508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003508:	4808      	ldr	r0, [pc, #32]	; (800352c <prvPortStartFirstTask+0x24>)
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	6800      	ldr	r0, [r0, #0]
 800350e:	f380 8808 	msr	MSP, r0
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f380 8814 	msr	CONTROL, r0
 800351a:	b662      	cpsie	i
 800351c:	b661      	cpsie	f
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	df00      	svc	0
 8003528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800352a:	bf00      	nop
 800352c:	e000ed08 	.word	0xe000ed08

08003530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003536:	4b44      	ldr	r3, [pc, #272]	; (8003648 <xPortStartScheduler+0x118>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a44      	ldr	r2, [pc, #272]	; (800364c <xPortStartScheduler+0x11c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d109      	bne.n	8003554 <xPortStartScheduler+0x24>
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	e7fe      	b.n	8003552 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003554:	4b3c      	ldr	r3, [pc, #240]	; (8003648 <xPortStartScheduler+0x118>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a3d      	ldr	r2, [pc, #244]	; (8003650 <xPortStartScheduler+0x120>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d109      	bne.n	8003572 <xPortStartScheduler+0x42>
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e7fe      	b.n	8003570 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <xPortStartScheduler+0x124>)
 8003574:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	22ff      	movs	r2, #255	; 0xff
 8003582:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <xPortStartScheduler+0x128>)
 8003598:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800359a:	4b30      	ldr	r3, [pc, #192]	; (800365c <xPortStartScheduler+0x12c>)
 800359c:	2207      	movs	r2, #7
 800359e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035a0:	e009      	b.n	80035b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80035a2:	4b2e      	ldr	r3, [pc, #184]	; (800365c <xPortStartScheduler+0x12c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	4a2c      	ldr	r2, [pc, #176]	; (800365c <xPortStartScheduler+0x12c>)
 80035aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035be:	2b80      	cmp	r3, #128	; 0x80
 80035c0:	d0ef      	beq.n	80035a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035c2:	4b26      	ldr	r3, [pc, #152]	; (800365c <xPortStartScheduler+0x12c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f1c3 0307 	rsb	r3, r3, #7
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d009      	beq.n	80035e2 <xPortStartScheduler+0xb2>
 80035ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	e7fe      	b.n	80035e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <xPortStartScheduler+0x12c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	4a1c      	ldr	r2, [pc, #112]	; (800365c <xPortStartScheduler+0x12c>)
 80035ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035ec:	4b1b      	ldr	r3, [pc, #108]	; (800365c <xPortStartScheduler+0x12c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035f4:	4a19      	ldr	r2, [pc, #100]	; (800365c <xPortStartScheduler+0x12c>)
 80035f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <xPortStartScheduler+0x130>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a16      	ldr	r2, [pc, #88]	; (8003660 <xPortStartScheduler+0x130>)
 8003606:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800360a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <xPortStartScheduler+0x130>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a13      	ldr	r2, [pc, #76]	; (8003660 <xPortStartScheduler+0x130>)
 8003612:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003616:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003618:	f000 f8d6 	bl	80037c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <xPortStartScheduler+0x134>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003622:	f000 f8f5 	bl	8003810 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <xPortStartScheduler+0x138>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a0f      	ldr	r2, [pc, #60]	; (8003668 <xPortStartScheduler+0x138>)
 800362c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003630:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003632:	f7ff ff69 	bl	8003508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003636:	f7ff fd5d 	bl	80030f4 <vTaskSwitchContext>
	prvTaskExitError();
 800363a:	f7ff ff27 	bl	800348c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	e000ed00 	.word	0xe000ed00
 800364c:	410fc271 	.word	0x410fc271
 8003650:	410fc270 	.word	0x410fc270
 8003654:	e000e400 	.word	0xe000e400
 8003658:	20000154 	.word	0x20000154
 800365c:	20000158 	.word	0x20000158
 8003660:	e000ed20 	.word	0xe000ed20
 8003664:	20000004 	.word	0x20000004
 8003668:	e000ef34 	.word	0xe000ef34

0800366c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <vPortEnterCritical+0x54>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3301      	adds	r3, #1
 800368a:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <vPortEnterCritical+0x54>)
 800368c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <vPortEnterCritical+0x54>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d10e      	bne.n	80036b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <vPortEnterCritical+0x58>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <vPortEnterCritical+0x48>
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	e7fe      	b.n	80036b2 <vPortEnterCritical+0x46>
	}
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	20000004 	.word	0x20000004
 80036c4:	e000ed04 	.word	0xe000ed04

080036c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <vPortExitCritical+0x4c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <vPortExitCritical+0x22>
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	e7fe      	b.n	80036e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <vPortExitCritical+0x4c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	4a08      	ldr	r2, [pc, #32]	; (8003714 <vPortExitCritical+0x4c>)
 80036f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <vPortExitCritical+0x4c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <vPortExitCritical+0x3e>
 80036fc:	2300      	movs	r3, #0
 80036fe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000004 	.word	0x20000004
	...

08003720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003720:	f3ef 8009 	mrs	r0, PSP
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <pxCurrentTCBConst>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	f01e 0f10 	tst.w	lr, #16
 8003730:	bf08      	it	eq
 8003732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373a:	6010      	str	r0, [r2, #0]
 800373c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003744:	f380 8811 	msr	BASEPRI, r0
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f7ff fcd0 	bl	80030f4 <vTaskSwitchContext>
 8003754:	f04f 0000 	mov.w	r0, #0
 8003758:	f380 8811 	msr	BASEPRI, r0
 800375c:	bc09      	pop	{r0, r3}
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	6808      	ldr	r0, [r1, #0]
 8003762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003766:	f01e 0f10 	tst.w	lr, #16
 800376a:	bf08      	it	eq
 800376c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003770:	f380 8809 	msr	PSP, r0
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	f3af 8000 	nop.w

08003780 <pxCurrentTCBConst>:
 8003780:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop

08003788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037a0:	f7ff fbec 	bl	8002f7c <xTaskIncrementTick>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <SysTick_Handler+0x3c>)
 80037ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	2300      	movs	r3, #0
 80037b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <vPortSetupTimerInterrupt+0x34>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <vPortSetupTimerInterrupt+0x38>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <vPortSetupTimerInterrupt+0x3c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <vPortSetupTimerInterrupt+0x40>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	099b      	lsrs	r3, r3, #6
 80037e4:	4a09      	ldr	r2, [pc, #36]	; (800380c <vPortSetupTimerInterrupt+0x44>)
 80037e6:	3b01      	subs	r3, #1
 80037e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037ea:	4b04      	ldr	r3, [pc, #16]	; (80037fc <vPortSetupTimerInterrupt+0x34>)
 80037ec:	2207      	movs	r2, #7
 80037ee:	601a      	str	r2, [r3, #0]
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000e010 	.word	0xe000e010
 8003800:	e000e018 	.word	0xe000e018
 8003804:	20000008 	.word	0x20000008
 8003808:	10624dd3 	.word	0x10624dd3
 800380c:	e000e014 	.word	0xe000e014

08003810 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003810:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003820 <vPortEnableVFP+0x10>
 8003814:	6801      	ldr	r1, [r0, #0]
 8003816:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800381a:	6001      	str	r1, [r0, #0]
 800381c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800381e:	bf00      	nop
 8003820:	e000ed88 	.word	0xe000ed88

08003824 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003830:	f7ff fafa 	bl	8002e28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003834:	4b57      	ldr	r3, [pc, #348]	; (8003994 <pvPortMalloc+0x170>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800383c:	f000 f90c 	bl	8003a58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003840:	4b55      	ldr	r3, [pc, #340]	; (8003998 <pvPortMalloc+0x174>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 808c 	bne.w	8003966 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01c      	beq.n	800388e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003854:	2208      	movs	r2, #8
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	2b00      	cmp	r3, #0
 8003864:	d013      	beq.n	800388e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f023 0307 	bic.w	r3, r3, #7
 800386c:	3308      	adds	r3, #8
 800386e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <pvPortMalloc+0x6a>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e7fe      	b.n	800388c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d068      	beq.n	8003966 <pvPortMalloc+0x142>
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <pvPortMalloc+0x178>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d863      	bhi.n	8003966 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800389e:	4b40      	ldr	r3, [pc, #256]	; (80039a0 <pvPortMalloc+0x17c>)
 80038a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038a2:	4b3f      	ldr	r3, [pc, #252]	; (80039a0 <pvPortMalloc+0x17c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038a8:	e004      	b.n	80038b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d903      	bls.n	80038c6 <pvPortMalloc+0xa2>
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f1      	bne.n	80038aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80038c6:	4b33      	ldr	r3, [pc, #204]	; (8003994 <pvPortMalloc+0x170>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d04a      	beq.n	8003966 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2208      	movs	r2, #8
 80038d6:	4413      	add	r3, r2
 80038d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1ad2      	subs	r2, r2, r3
 80038ea:	2308      	movs	r3, #8
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d91e      	bls.n	8003930 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	2b00      	cmp	r3, #0
 8003902:	d009      	beq.n	8003918 <pvPortMalloc+0xf4>
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e7fe      	b.n	8003916 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	1ad2      	subs	r2, r2, r3
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800392a:	69b8      	ldr	r0, [r7, #24]
 800392c:	f000 f8f6 	bl	8003b1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003930:	4b1a      	ldr	r3, [pc, #104]	; (800399c <pvPortMalloc+0x178>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	4a18      	ldr	r2, [pc, #96]	; (800399c <pvPortMalloc+0x178>)
 800393c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800393e:	4b17      	ldr	r3, [pc, #92]	; (800399c <pvPortMalloc+0x178>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <pvPortMalloc+0x180>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d203      	bcs.n	8003952 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <pvPortMalloc+0x178>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <pvPortMalloc+0x180>)
 8003950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <pvPortMalloc+0x174>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	431a      	orrs	r2, r3
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003966:	f7ff fa6d 	bl	8002e44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	2b00      	cmp	r3, #0
 8003972:	d009      	beq.n	8003988 <pvPortMalloc+0x164>
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e7fe      	b.n	8003986 <pvPortMalloc+0x162>
	return pvReturn;
 8003988:	69fb      	ldr	r3, [r7, #28]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3728      	adds	r7, #40	; 0x28
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20003d64 	.word	0x20003d64
 8003998:	20003d70 	.word	0x20003d70
 800399c:	20003d68 	.word	0x20003d68
 80039a0:	20003d5c 	.word	0x20003d5c
 80039a4:	20003d6c 	.word	0x20003d6c

080039a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d046      	beq.n	8003a48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039ba:	2308      	movs	r3, #8
 80039bc:	425b      	negs	r3, r3
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4413      	add	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <vPortFree+0xa8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <vPortFree+0x42>
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e7fe      	b.n	80039e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <vPortFree+0x5e>
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	e7fe      	b.n	8003a04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <vPortFree+0xa8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d019      	beq.n	8003a48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d115      	bne.n	8003a48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <vPortFree+0xa8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	401a      	ands	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a2c:	f7ff f9fc 	bl	8002e28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <vPortFree+0xac>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4413      	add	r3, r2
 8003a3a:	4a06      	ldr	r2, [pc, #24]	; (8003a54 <vPortFree+0xac>)
 8003a3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a3e:	6938      	ldr	r0, [r7, #16]
 8003a40:	f000 f86c 	bl	8003b1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a44:	f7ff f9fe 	bl	8002e44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20003d70 	.word	0x20003d70
 8003a54:	20003d68 	.word	0x20003d68

08003a58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a5e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003a62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a64:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <prvHeapInit+0xac>)
 8003a66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3307      	adds	r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0307 	bic.w	r3, r3, #7
 8003a7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <prvHeapInit+0xac>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a90:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <prvHeapInit+0xb0>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a96:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <prvHeapInit+0xb0>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0307 	bic.w	r3, r3, #7
 8003ab2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <prvHeapInit+0xb4>)
 8003ab8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003aba:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <prvHeapInit+0xb4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <prvHeapInit+0xb4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	1ad2      	subs	r2, r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <prvHeapInit+0xb4>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <prvHeapInit+0xb8>)
 8003ae6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <prvHeapInit+0xbc>)
 8003aee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <prvHeapInit+0xc0>)
 8003af2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003af6:	601a      	str	r2, [r3, #0]
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	2000015c 	.word	0x2000015c
 8003b08:	20003d5c 	.word	0x20003d5c
 8003b0c:	20003d64 	.word	0x20003d64
 8003b10:	20003d6c 	.word	0x20003d6c
 8003b14:	20003d68 	.word	0x20003d68
 8003b18:	20003d70 	.word	0x20003d70

08003b1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <prvInsertBlockIntoFreeList+0xac>)
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	e002      	b.n	8003b30 <prvInsertBlockIntoFreeList+0x14>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d8f7      	bhi.n	8003b2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	4413      	add	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d108      	bne.n	8003b5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	441a      	add	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	441a      	add	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d118      	bne.n	8003ba4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <prvInsertBlockIntoFreeList+0xb0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d00d      	beq.n	8003b9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e008      	b.n	8003bac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <prvInsertBlockIntoFreeList+0xb0>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e003      	b.n	8003bac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d002      	beq.n	8003bba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20003d5c 	.word	0x20003d5c
 8003bcc:	20003d64 	.word	0x20003d64

08003bd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a07      	ldr	r2, [pc, #28]	; (8003bfc <vApplicationGetIdleTaskMemory+0x2c>)
 8003be0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4a06      	ldr	r2, [pc, #24]	; (8003c00 <vApplicationGetIdleTaskMemory+0x30>)
 8003be6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20003d74 	.word	0x20003d74
 8003c00:	20003dc8 	.word	0x20003dc8

08003c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c04:	b5b0      	push	{r4, r5, r7, lr}
 8003c06:	b09c      	sub	sp, #112	; 0x70
 8003c08:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c0a:	f7fc fc69 	bl	80004e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c0e:	f000 f86d 	bl	8003cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c12:	f000 fb0d 	bl	8004230 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003c16:	f000 f8d3 	bl	8003dc0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8003c1a:	f000 f8ff 	bl	8003e1c <MX_SPI2_Init>
  MX_TIM1_Init();
 8003c1e:	f000 f933 	bl	8003e88 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003c22:	f000 f9bf 	bl	8003fa4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003c26:	f000 fa4b 	bl	80040c0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003c2a:	f000 faad 	bl	8004188 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003c2e:	f000 fad5 	bl	80041dc <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SensorTask */
  osThreadDef(SensorTask, StartGetSensor, osPriorityAboveNormal, 0, 128);
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <main+0xc8>)
 8003c34:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003c38:	461d      	mov	r5, r3
 8003c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8003c46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fdbe 	bl	80027ce <osThreadCreate>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <main+0xcc>)
 8003c56:	601a      	str	r2, [r3, #0]

  /* definition and creation of ControlTask */
  osThreadDef(ControlTask, StartControl, osPriorityNormal, 0, 128);
 8003c58:	4b1e      	ldr	r3, [pc, #120]	; (8003cd4 <main+0xd0>)
 8003c5a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003c5e:	461d      	mov	r5, r3
 8003c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlTaskHandle = osThreadCreate(osThread(ControlTask), NULL);
 8003c6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fdab 	bl	80027ce <osThreadCreate>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <main+0xd4>)
 8003c7c:	601a      	str	r2, [r3, #0]

  /* definition and creation of DisplayTask */
  osThreadDef(DisplayTask, StartDisplayTask, osPriorityBelowNormal, 0, 128);
 8003c7e:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <main+0xd8>)
 8003c80:	f107 041c 	add.w	r4, r7, #28
 8003c84:	461d      	mov	r5, r3
 8003c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 8003c92:	f107 031c 	add.w	r3, r7, #28
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe fd98 	bl	80027ce <osThreadCreate>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <main+0xdc>)
 8003ca2:	601a      	str	r2, [r3, #0]

  /* definition and creation of ServerTask */
  osThreadDef(ServerTask, StartServerTask, osPriorityAboveNormal, 0, 128);
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <main+0xe0>)
 8003ca6:	463c      	mov	r4, r7
 8003ca8:	461d      	mov	r5, r3
 8003caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003cb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ServerTaskHandle = osThreadCreate(osThread(ServerTask), NULL);
 8003cb6:	463b      	mov	r3, r7
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fd87 	bl	80027ce <osThreadCreate>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <main+0xe4>)
 8003cc4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003cc6:	f7fe fd7b 	bl	80027c0 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003cca:	e7fe      	b.n	8003cca <main+0xc6>
 8003ccc:	08004ac4 	.word	0x08004ac4
 8003cd0:	20003fcc 	.word	0x20003fcc
 8003cd4:	08004aec 	.word	0x08004aec
 8003cd8:	200041c4 	.word	0x200041c4
 8003cdc:	08004b14 	.word	0x08004b14
 8003ce0:	2000413c 	.word	0x2000413c
 8003ce4:	08004b3c 	.word	0x08004b3c
 8003ce8:	20004140 	.word	0x20004140

08003cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b094      	sub	sp, #80	; 0x50
 8003cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cf2:	f107 0320 	add.w	r3, r7, #32
 8003cf6:	2230      	movs	r2, #48	; 0x30
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fec4 	bl	8004a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d00:	f107 030c 	add.w	r3, r7, #12
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <SystemClock_Config+0xcc>)
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	4a27      	ldr	r2, [pc, #156]	; (8003db8 <SystemClock_Config+0xcc>)
 8003d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <SystemClock_Config+0xcc>)
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <SystemClock_Config+0xd0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a21      	ldr	r2, [pc, #132]	; (8003dbc <SystemClock_Config+0xd0>)
 8003d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <SystemClock_Config+0xd0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d50:	2310      	movs	r3, #16
 8003d52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d54:	2302      	movs	r3, #2
 8003d56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003d60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003d64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003d66:	2304      	movs	r3, #4
 8003d68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d6e:	f107 0320 	add.w	r3, r7, #32
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc ff9c 	bl	8000cb0 <HAL_RCC_OscConfig>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003d7e:	f000 fb23 	bl	80043c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d82:	230f      	movs	r3, #15
 8003d84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d86:	2302      	movs	r3, #2
 8003d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d98:	f107 030c 	add.w	r3, r7, #12
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd f9c8 	bl	8001134 <HAL_RCC_ClockConfig>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003daa:	f000 fb0d 	bl	80043c8 <Error_Handler>
  }
}
 8003dae:	bf00      	nop
 8003db0:	3750      	adds	r7, #80	; 0x50
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40007000 	.word	0x40007000

08003dc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <MX_I2C1_Init+0x50>)
 8003dc6:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <MX_I2C1_Init+0x54>)
 8003dc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <MX_I2C1_Init+0x50>)
 8003dcc:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <MX_I2C1_Init+0x58>)
 8003dce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <MX_I2C1_Init+0x50>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <MX_I2C1_Init+0x50>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <MX_I2C1_Init+0x50>)
 8003dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003de2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <MX_I2C1_Init+0x50>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <MX_I2C1_Init+0x50>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <MX_I2C1_Init+0x50>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <MX_I2C1_Init+0x50>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003dfc:	4804      	ldr	r0, [pc, #16]	; (8003e10 <MX_I2C1_Init+0x50>)
 8003dfe:	f7fc fe2f 	bl	8000a60 <HAL_I2C_Init>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003e08:	f000 fade 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e0c:	bf00      	nop
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20004028 	.word	0x20004028
 8003e14:	40005400 	.word	0x40005400
 8003e18:	000186a0 	.word	0x000186a0

08003e1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003e20:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e22:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <MX_SPI2_Init+0x68>)
 8003e24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e26:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e2e:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e34:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003e46:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e60:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e68:	220a      	movs	r2, #10
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003e6c:	4804      	ldr	r0, [pc, #16]	; (8003e80 <MX_SPI2_Init+0x64>)
 8003e6e:	f7fd fb5b 	bl	8001528 <HAL_SPI_Init>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003e78:	f000 faa6 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003e7c:	bf00      	nop
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20003fd0 	.word	0x20003fd0
 8003e84:	40003800 	.word	0x40003800

08003e88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b092      	sub	sp, #72	; 0x48
 8003e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
 8003ea8:	615a      	str	r2, [r3, #20]
 8003eaa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	2220      	movs	r2, #32
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fde8 	bl	8004a88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003eb8:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003eba:	4a39      	ldr	r2, [pc, #228]	; (8003fa0 <MX_TIM1_Init+0x118>)
 8003ebc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ec4:	4b35      	ldr	r3, [pc, #212]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8003eca:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ed0:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003edc:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ee2:	482e      	ldr	r0, [pc, #184]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003ee4:	f7fd fbd3 	bl	800168e <HAL_TIM_PWM_Init>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8003eee:	f000 fa6b 	bl	80043c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003efe:	4619      	mov	r1, r3
 8003f00:	4826      	ldr	r0, [pc, #152]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003f02:	f7fe f943 	bl	800218c <HAL_TIMEx_MasterConfigSynchronization>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8003f0c:	f000 fa5c 	bl	80043c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f10:	2360      	movs	r3, #96	; 0x60
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f24:	2300      	movs	r3, #0
 8003f26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f30:	2200      	movs	r2, #0
 8003f32:	4619      	mov	r1, r3
 8003f34:	4819      	ldr	r0, [pc, #100]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003f36:	f7fd fcdd 	bl	80018f4 <HAL_TIM_PWM_ConfigChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8003f40:	f000 fa42 	bl	80043c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f48:	220c      	movs	r2, #12
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4813      	ldr	r0, [pc, #76]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003f4e:	f7fd fcd1 	bl	80018f4 <HAL_TIM_PWM_ConfigChannel>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8003f58:	f000 fa36 	bl	80043c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4807      	ldr	r0, [pc, #28]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003f80:	f7fe f949 	bl	8002216 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003f8a:	f000 fa1d 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f8e:	4803      	ldr	r0, [pc, #12]	; (8003f9c <MX_TIM1_Init+0x114>)
 8003f90:	f000 fb56 	bl	8004640 <HAL_TIM_MspPostInit>

}
 8003f94:	bf00      	nop
 8003f96:	3748      	adds	r7, #72	; 0x48
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200040fc 	.word	0x200040fc
 8003fa0:	40010000 	.word	0x40010000

08003fa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08e      	sub	sp, #56	; 0x38
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb8:	f107 0320 	add.w	r3, r7, #32
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	609a      	str	r2, [r3, #8]
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	611a      	str	r2, [r3, #16]
 8003fd0:	615a      	str	r2, [r3, #20]
 8003fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fd4:	4b38      	ldr	r3, [pc, #224]	; (80040b8 <MX_TIM2_Init+0x114>)
 8003fd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8003fdc:	4b36      	ldr	r3, [pc, #216]	; (80040b8 <MX_TIM2_Init+0x114>)
 8003fde:	f240 623f 	movw	r2, #1599	; 0x63f
 8003fe2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe4:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <MX_TIM2_Init+0x114>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8003fea:	4b33      	ldr	r3, [pc, #204]	; (80040b8 <MX_TIM2_Init+0x114>)
 8003fec:	4a33      	ldr	r2, [pc, #204]	; (80040bc <MX_TIM2_Init+0x118>)
 8003fee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff0:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <MX_TIM2_Init+0x114>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff6:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <MX_TIM2_Init+0x114>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ffc:	482e      	ldr	r0, [pc, #184]	; (80040b8 <MX_TIM2_Init+0x114>)
 8003ffe:	f7fd faf7 	bl	80015f0 <HAL_TIM_Base_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004008:	f000 f9de 	bl	80043c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800400c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004016:	4619      	mov	r1, r3
 8004018:	4827      	ldr	r0, [pc, #156]	; (80040b8 <MX_TIM2_Init+0x114>)
 800401a:	f7fd fd31 	bl	8001a80 <HAL_TIM_ConfigClockSource>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004024:	f000 f9d0 	bl	80043c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004028:	4823      	ldr	r0, [pc, #140]	; (80040b8 <MX_TIM2_Init+0x114>)
 800402a:	f7fd fb30 	bl	800168e <HAL_TIM_PWM_Init>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004034:	f000 f9c8 	bl	80043c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004038:	2300      	movs	r3, #0
 800403a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800403c:	2300      	movs	r3, #0
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004040:	f107 0320 	add.w	r3, r7, #32
 8004044:	4619      	mov	r1, r3
 8004046:	481c      	ldr	r0, [pc, #112]	; (80040b8 <MX_TIM2_Init+0x114>)
 8004048:	f7fe f8a0 	bl	800218c <HAL_TIMEx_MasterConfigSynchronization>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004052:	f000 f9b9 	bl	80043c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004056:	2360      	movs	r3, #96	; 0x60
 8004058:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	2200      	movs	r2, #0
 800406a:	4619      	mov	r1, r3
 800406c:	4812      	ldr	r0, [pc, #72]	; (80040b8 <MX_TIM2_Init+0x114>)
 800406e:	f7fd fc41 	bl	80018f4 <HAL_TIM_PWM_ConfigChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004078:	f000 f9a6 	bl	80043c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	2204      	movs	r2, #4
 8004080:	4619      	mov	r1, r3
 8004082:	480d      	ldr	r0, [pc, #52]	; (80040b8 <MX_TIM2_Init+0x114>)
 8004084:	f7fd fc36 	bl	80018f4 <HAL_TIM_PWM_ConfigChannel>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800408e:	f000 f99b 	bl	80043c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	2208      	movs	r2, #8
 8004096:	4619      	mov	r1, r3
 8004098:	4807      	ldr	r0, [pc, #28]	; (80040b8 <MX_TIM2_Init+0x114>)
 800409a:	f7fd fc2b 	bl	80018f4 <HAL_TIM_PWM_ConfigChannel>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80040a4:	f000 f990 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80040a8:	4803      	ldr	r0, [pc, #12]	; (80040b8 <MX_TIM2_Init+0x114>)
 80040aa:	f000 fac9 	bl	8004640 <HAL_TIM_MspPostInit>

}
 80040ae:	bf00      	nop
 80040b0:	3738      	adds	r7, #56	; 0x38
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20004144 	.word	0x20004144
 80040bc:	000f423f 	.word	0x000f423f

080040c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	; 0x28
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c6:	f107 0320 	add.w	r3, r7, #32
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	605a      	str	r2, [r3, #4]
 80040d8:	609a      	str	r2, [r3, #8]
 80040da:	60da      	str	r2, [r3, #12]
 80040dc:	611a      	str	r2, [r3, #16]
 80040de:	615a      	str	r2, [r3, #20]
 80040e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040e2:	4b27      	ldr	r3, [pc, #156]	; (8004180 <MX_TIM3_Init+0xc0>)
 80040e4:	4a27      	ldr	r2, [pc, #156]	; (8004184 <MX_TIM3_Init+0xc4>)
 80040e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80040e8:	4b25      	ldr	r3, [pc, #148]	; (8004180 <MX_TIM3_Init+0xc0>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ee:	4b24      	ldr	r3, [pc, #144]	; (8004180 <MX_TIM3_Init+0xc0>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80040f4:	4b22      	ldr	r3, [pc, #136]	; (8004180 <MX_TIM3_Init+0xc0>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <MX_TIM3_Init+0xc0>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <MX_TIM3_Init+0xc0>)
 8004102:	2200      	movs	r2, #0
 8004104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004106:	481e      	ldr	r0, [pc, #120]	; (8004180 <MX_TIM3_Init+0xc0>)
 8004108:	f7fd fac1 	bl	800168e <HAL_TIM_PWM_Init>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8004112:	f000 f959 	bl	80043c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800411e:	f107 0320 	add.w	r3, r7, #32
 8004122:	4619      	mov	r1, r3
 8004124:	4816      	ldr	r0, [pc, #88]	; (8004180 <MX_TIM3_Init+0xc0>)
 8004126:	f7fe f831 	bl	800218c <HAL_TIMEx_MasterConfigSynchronization>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8004130:	f000 f94a 	bl	80043c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004134:	2360      	movs	r3, #96	; 0x60
 8004136:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	2200      	movs	r2, #0
 8004148:	4619      	mov	r1, r3
 800414a:	480d      	ldr	r0, [pc, #52]	; (8004180 <MX_TIM3_Init+0xc0>)
 800414c:	f7fd fbd2 	bl	80018f4 <HAL_TIM_PWM_ConfigChannel>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004156:	f000 f937 	bl	80043c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	2204      	movs	r2, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4807      	ldr	r0, [pc, #28]	; (8004180 <MX_TIM3_Init+0xc0>)
 8004162:	f7fd fbc7 	bl	80018f4 <HAL_TIM_PWM_ConfigChannel>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800416c:	f000 f92c 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004170:	4803      	ldr	r0, [pc, #12]	; (8004180 <MX_TIM3_Init+0xc0>)
 8004172:	f000 fa65 	bl	8004640 <HAL_TIM_MspPostInit>

}
 8004176:	bf00      	nop
 8004178:	3728      	adds	r7, #40	; 0x28
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	2000407c 	.word	0x2000407c
 8004184:	40000400 	.word	0x40000400

08004188 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <MX_USART1_UART_Init+0x4c>)
 800418e:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <MX_USART1_UART_Init+0x50>)
 8004190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <MX_USART1_UART_Init+0x4c>)
 8004194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800419a:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <MX_USART1_UART_Init+0x4c>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <MX_USART1_UART_Init+0x4c>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <MX_USART1_UART_Init+0x4c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <MX_USART1_UART_Init+0x4c>)
 80041ae:	220c      	movs	r2, #12
 80041b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <MX_USART1_UART_Init+0x4c>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <MX_USART1_UART_Init+0x4c>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041be:	4805      	ldr	r0, [pc, #20]	; (80041d4 <MX_USART1_UART_Init+0x4c>)
 80041c0:	f7fe f88f 	bl	80022e2 <HAL_UART_Init>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80041ca:	f000 f8fd 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200040bc 	.word	0x200040bc
 80041d8:	40011000 	.word	0x40011000

080041dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <MX_USART2_UART_Init+0x50>)
 80041e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 80041e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041fa:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 8004202:	220c      	movs	r2, #12
 8004204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 8004208:	2200      	movs	r2, #0
 800420a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 800420e:	2200      	movs	r2, #0
 8004210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004212:	4805      	ldr	r0, [pc, #20]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 8004214:	f7fe f865 	bl	80022e2 <HAL_UART_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800421e:	f000 f8d3 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20004184 	.word	0x20004184
 800422c:	40004400 	.word	0x40004400

08004230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004236:	f107 0314 	add.w	r3, r7, #20
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	60da      	str	r2, [r3, #12]
 8004244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	4b40      	ldr	r3, [pc, #256]	; (800434c <MX_GPIO_Init+0x11c>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	4a3f      	ldr	r2, [pc, #252]	; (800434c <MX_GPIO_Init+0x11c>)
 8004250:	f043 0304 	orr.w	r3, r3, #4
 8004254:	6313      	str	r3, [r2, #48]	; 0x30
 8004256:	4b3d      	ldr	r3, [pc, #244]	; (800434c <MX_GPIO_Init+0x11c>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <MX_GPIO_Init+0x11c>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4a38      	ldr	r2, [pc, #224]	; (800434c <MX_GPIO_Init+0x11c>)
 800426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004270:	6313      	str	r3, [r2, #48]	; 0x30
 8004272:	4b36      	ldr	r3, [pc, #216]	; (800434c <MX_GPIO_Init+0x11c>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	4b32      	ldr	r3, [pc, #200]	; (800434c <MX_GPIO_Init+0x11c>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	4a31      	ldr	r2, [pc, #196]	; (800434c <MX_GPIO_Init+0x11c>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6313      	str	r3, [r2, #48]	; 0x30
 800428e:	4b2f      	ldr	r3, [pc, #188]	; (800434c <MX_GPIO_Init+0x11c>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	4b2b      	ldr	r3, [pc, #172]	; (800434c <MX_GPIO_Init+0x11c>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	4a2a      	ldr	r2, [pc, #168]	; (800434c <MX_GPIO_Init+0x11c>)
 80042a4:	f043 0302 	orr.w	r3, r3, #2
 80042a8:	6313      	str	r3, [r2, #48]	; 0x30
 80042aa:	4b28      	ldr	r3, [pc, #160]	; (800434c <MX_GPIO_Init+0x11c>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4 
 80042b6:	2200      	movs	r2, #0
 80042b8:	f64e 4130 	movw	r1, #60464	; 0xec30
 80042bc:	4824      	ldr	r0, [pc, #144]	; (8004350 <MX_GPIO_Init+0x120>)
 80042be:	f7fc fbb5 	bl	8000a2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|RELAY_Pin|UV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80042c2:	2200      	movs	r2, #0
 80042c4:	2103      	movs	r1, #3
 80042c6:	4823      	ldr	r0, [pc, #140]	; (8004354 <MX_GPIO_Init+0x124>)
 80042c8:	f7fc fbb0 	bl	8000a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_LED_Pin|LCD_DC_RS_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 80042cc:	2201      	movs	r2, #1
 80042ce:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80042d2:	481f      	ldr	r0, [pc, #124]	; (8004350 <MX_GPIO_Init+0x120>)
 80042d4:	f7fc fbaa 	bl	8000a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4 
                           PC5 LCD_LED_Pin LCD_DC_RS_Pin LCD_RESET_Pin 
                           LCD_CS_Pin RELAY_Pin UV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4 
 80042d8:	f64e 73f0 	movw	r3, #61424	; 0xeff0
 80042dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|LCD_LED_Pin|LCD_DC_RS_Pin|LCD_RESET_Pin 
                          |LCD_CS_Pin|RELAY_Pin|UV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042de:	2301      	movs	r3, #1
 80042e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e6:	2300      	movs	r3, #0
 80042e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ea:	f107 0314 	add.w	r3, r7, #20
 80042ee:	4619      	mov	r1, r3
 80042f0:	4817      	ldr	r0, [pc, #92]	; (8004350 <MX_GPIO_Init+0x120>)
 80042f2:	f7fc fa19 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042f6:	2303      	movs	r3, #3
 80042f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042fa:	2301      	movs	r3, #1
 80042fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004302:	2300      	movs	r3, #0
 8004304:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	4619      	mov	r1, r3
 800430c:	4811      	ldr	r0, [pc, #68]	; (8004354 <MX_GPIO_Init+0x124>)
 800430e:	f7fc fa0b 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 8004312:	2308      	movs	r3, #8
 8004314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 800431e:	f107 0314 	add.w	r3, r7, #20
 8004322:	4619      	mov	r1, r3
 8004324:	480b      	ldr	r0, [pc, #44]	; (8004354 <MX_GPIO_Init+0x124>)
 8004326:	f7fc f9ff 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn1_Pin Btn2_Pin */
  GPIO_InitStruct.Pin = Btn1_Pin|Btn2_Pin;
 800432a:	2330      	movs	r3, #48	; 0x30
 800432c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <MX_GPIO_Init+0x128>)
 8004330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004336:	f107 0314 	add.w	r3, r7, #20
 800433a:	4619      	mov	r1, r3
 800433c:	4805      	ldr	r0, [pc, #20]	; (8004354 <MX_GPIO_Init+0x124>)
 800433e:	f7fc f9f3 	bl	8000728 <HAL_GPIO_Init>

}
 8004342:	bf00      	nop
 8004344:	3728      	adds	r7, #40	; 0x28
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	40020800 	.word	0x40020800
 8004354:	40020400 	.word	0x40020400
 8004358:	10110000 	.word	0x10110000

0800435c <StartGetSensor>:
  * @retval None
  */
/* USER CODE END Header_StartGetSensor */
// Đọc các giá trị từ cảm biến và lưu ở đây
void StartGetSensor(void const * argument)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	// Cứ 2s sẽ tiến hành lấy giá trị cảm biến 1 lần
    osDelay(2000);
 8004364:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004368:	f7fe fa7d 	bl	8002866 <osDelay>
 800436c:	e7fa      	b.n	8004364 <StartGetSensor+0x8>

0800436e <StartControl>:
* @retval None
*/
/* USER CODE END Header_StartControl */
// Xét chế độ điều khiển ở đây
void StartControl(void const * argument)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]


  for(;;)
  {
	// 1s sẽ xét chế độ 1 lần
    osDelay(1000);
 8004376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800437a:	f7fe fa74 	bl	8002866 <osDelay>
 800437e:	e7fa      	b.n	8004376 <StartControl+0x8>

08004380 <StartDisplayTask>:
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
// Task điều khiển tín hiệu màn hình
void StartDisplayTask(void const * argument)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]


  for(;;)
  {
	// 0.5s sẽ chờ để gửi tín hiệu hiển thị
    osDelay(500);
 8004388:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800438c:	f7fe fa6b 	bl	8002866 <osDelay>
 8004390:	e7fa      	b.n	8004388 <StartDisplayTask+0x8>

08004392 <StartServerTask>:
* @retval None
*/
/* USER CODE END Header_StartServerTask */
// Task giao tiếp với Silab qua UART
void StartServerTask(void const * argument)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]


  for(;;)
  {
	// Cứ 1s sẽ tiến hành cập nhật và gửi một lần
    osDelay(1000);
 800439a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800439e:	f7fe fa62 	bl	8002866 <osDelay>
 80043a2:	e7fa      	b.n	800439a <StartServerTask+0x8>

080043a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80043b6:	f7fc f8b5 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40000800 	.word	0x40000800

080043c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_MspInit+0x54>)
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	4a11      	ldr	r2, [pc, #68]	; (800442c <HAL_MspInit+0x54>)
 80043e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043ec:	6453      	str	r3, [r2, #68]	; 0x44
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <HAL_MspInit+0x54>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f6:	607b      	str	r3, [r7, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_MspInit+0x54>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	4a0a      	ldr	r2, [pc, #40]	; (800442c <HAL_MspInit+0x54>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	; 0x40
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <HAL_MspInit+0x54>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	210f      	movs	r1, #15
 800441a:	f06f 0001 	mvn.w	r0, #1
 800441e:	f7fc f959 	bl	80006d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800

08004430 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004438:	f107 0314 	add.w	r3, r7, #20
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	60da      	str	r2, [r3, #12]
 8004446:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a19      	ldr	r2, [pc, #100]	; (80044b4 <HAL_I2C_MspInit+0x84>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d12b      	bne.n	80044aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	4b18      	ldr	r3, [pc, #96]	; (80044b8 <HAL_I2C_MspInit+0x88>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <HAL_I2C_MspInit+0x88>)
 800445c:	f043 0302 	orr.w	r3, r3, #2
 8004460:	6313      	str	r3, [r2, #48]	; 0x30
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <HAL_I2C_MspInit+0x88>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800446e:	23c0      	movs	r3, #192	; 0xc0
 8004470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004472:	2312      	movs	r3, #18
 8004474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004476:	2301      	movs	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447a:	2303      	movs	r3, #3
 800447c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800447e:	2304      	movs	r3, #4
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004482:	f107 0314 	add.w	r3, r7, #20
 8004486:	4619      	mov	r1, r3
 8004488:	480c      	ldr	r0, [pc, #48]	; (80044bc <HAL_I2C_MspInit+0x8c>)
 800448a:	f7fc f94d 	bl	8000728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_I2C_MspInit+0x88>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <HAL_I2C_MspInit+0x88>)
 8004498:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800449c:	6413      	str	r3, [r2, #64]	; 0x40
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_I2C_MspInit+0x88>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80044aa:	bf00      	nop
 80044ac:	3728      	adds	r7, #40	; 0x28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40005400 	.word	0x40005400
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40020400 	.word	0x40020400

080044c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a28      	ldr	r2, [pc, #160]	; (8004580 <HAL_SPI_MspInit+0xc0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d14a      	bne.n	8004578 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	4b27      	ldr	r3, [pc, #156]	; (8004584 <HAL_SPI_MspInit+0xc4>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	4a26      	ldr	r2, [pc, #152]	; (8004584 <HAL_SPI_MspInit+0xc4>)
 80044ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f0:	6413      	str	r3, [r2, #64]	; 0x40
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_SPI_MspInit+0xc4>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	4b20      	ldr	r3, [pc, #128]	; (8004584 <HAL_SPI_MspInit+0xc4>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <HAL_SPI_MspInit+0xc4>)
 8004508:	f043 0304 	orr.w	r3, r3, #4
 800450c:	6313      	str	r3, [r2, #48]	; 0x30
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_SPI_MspInit+0xc4>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_SPI_MspInit+0xc4>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	4a18      	ldr	r2, [pc, #96]	; (8004584 <HAL_SPI_MspInit+0xc4>)
 8004524:	f043 0302 	orr.w	r3, r3, #2
 8004528:	6313      	str	r3, [r2, #48]	; 0x30
 800452a:	4b16      	ldr	r3, [pc, #88]	; (8004584 <HAL_SPI_MspInit+0xc4>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004536:	230c      	movs	r3, #12
 8004538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453a:	2302      	movs	r3, #2
 800453c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004542:	2303      	movs	r3, #3
 8004544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004546:	2305      	movs	r3, #5
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800454a:	f107 0314 	add.w	r3, r7, #20
 800454e:	4619      	mov	r1, r3
 8004550:	480d      	ldr	r0, [pc, #52]	; (8004588 <HAL_SPI_MspInit+0xc8>)
 8004552:	f7fc f8e9 	bl	8000728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800455a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455c:	2302      	movs	r3, #2
 800455e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004564:	2303      	movs	r3, #3
 8004566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004568:	2305      	movs	r3, #5
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800456c:	f107 0314 	add.w	r3, r7, #20
 8004570:	4619      	mov	r1, r3
 8004572:	4806      	ldr	r0, [pc, #24]	; (800458c <HAL_SPI_MspInit+0xcc>)
 8004574:	f7fc f8d8 	bl	8000728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004578:	bf00      	nop
 800457a:	3728      	adds	r7, #40	; 0x28
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40003800 	.word	0x40003800
 8004584:	40023800 	.word	0x40023800
 8004588:	40020800 	.word	0x40020800
 800458c:	40020400 	.word	0x40020400

08004590 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <HAL_TIM_PWM_MspInit+0x64>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10e      	bne.n	80045c0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <HAL_TIM_PWM_MspInit+0x68>)
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <HAL_TIM_PWM_MspInit+0x68>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6453      	str	r3, [r2, #68]	; 0x44
 80045b2:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <HAL_TIM_PWM_MspInit+0x68>)
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80045be:	e012      	b.n	80045e6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <HAL_TIM_PWM_MspInit+0x6c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10d      	bne.n	80045e6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <HAL_TIM_PWM_MspInit+0x68>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_TIM_PWM_MspInit+0x68>)
 80045d4:	f043 0302 	orr.w	r3, r3, #2
 80045d8:	6413      	str	r3, [r2, #64]	; 0x40
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <HAL_TIM_PWM_MspInit+0x68>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	60bb      	str	r3, [r7, #8]
 80045e4:	68bb      	ldr	r3, [r7, #8]
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40000400 	.word	0x40000400

08004600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004610:	d10d      	bne.n	800462e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_TIM_Base_MspInit+0x3c>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a08      	ldr	r2, [pc, #32]	; (800463c <HAL_TIM_Base_MspInit+0x3c>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_TIM_Base_MspInit+0x3c>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800

08004640 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	; 0x30
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004648:	f107 031c 	add.w	r3, r7, #28
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	609a      	str	r2, [r3, #8]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a46      	ldr	r2, [pc, #280]	; (8004778 <HAL_TIM_MspPostInit+0x138>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d11f      	bne.n	80046a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	4b45      	ldr	r3, [pc, #276]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	4a44      	ldr	r2, [pc, #272]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6313      	str	r3, [r2, #48]	; 0x30
 8004672:	4b42      	ldr	r3, [pc, #264]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800467e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004684:	2302      	movs	r3, #2
 8004686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004688:	2300      	movs	r3, #0
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468c:	2300      	movs	r3, #0
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004690:	2301      	movs	r3, #1
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004694:	f107 031c 	add.w	r3, r7, #28
 8004698:	4619      	mov	r1, r3
 800469a:	4839      	ldr	r0, [pc, #228]	; (8004780 <HAL_TIM_MspPostInit+0x140>)
 800469c:	f7fc f844 	bl	8000728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80046a0:	e065      	b.n	800476e <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d13d      	bne.n	8004728 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	4b32      	ldr	r3, [pc, #200]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	4a31      	ldr	r2, [pc, #196]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6313      	str	r3, [r2, #48]	; 0x30
 80046bc:	4b2f      	ldr	r3, [pc, #188]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	4b2b      	ldr	r3, [pc, #172]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	4a2a      	ldr	r2, [pc, #168]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 80046d2:	f043 0302 	orr.w	r3, r3, #2
 80046d6:	6313      	str	r3, [r2, #48]	; 0x30
 80046d8:	4b28      	ldr	r3, [pc, #160]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80046e4:	2303      	movs	r3, #3
 80046e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e8:	2302      	movs	r3, #2
 80046ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046f4:	2301      	movs	r3, #1
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f8:	f107 031c 	add.w	r3, r7, #28
 80046fc:	4619      	mov	r1, r3
 80046fe:	4820      	ldr	r0, [pc, #128]	; (8004780 <HAL_TIM_MspPostInit+0x140>)
 8004700:	f7fc f812 	bl	8000728 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470a:	2302      	movs	r3, #2
 800470c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	2300      	movs	r3, #0
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004712:	2300      	movs	r3, #0
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004716:	2301      	movs	r3, #1
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800471a:	f107 031c 	add.w	r3, r7, #28
 800471e:	4619      	mov	r1, r3
 8004720:	4818      	ldr	r0, [pc, #96]	; (8004784 <HAL_TIM_MspPostInit+0x144>)
 8004722:	f7fc f801 	bl	8000728 <HAL_GPIO_Init>
}
 8004726:	e022      	b.n	800476e <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a16      	ldr	r2, [pc, #88]	; (8004788 <HAL_TIM_MspPostInit+0x148>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d11d      	bne.n	800476e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	4a10      	ldr	r2, [pc, #64]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	6313      	str	r3, [r2, #48]	; 0x30
 8004742:	4b0e      	ldr	r3, [pc, #56]	; (800477c <HAL_TIM_MspPostInit+0x13c>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800474e:	23c0      	movs	r3, #192	; 0xc0
 8004750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004752:	2302      	movs	r3, #2
 8004754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	2300      	movs	r3, #0
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475a:	2300      	movs	r3, #0
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800475e:	2302      	movs	r3, #2
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004762:	f107 031c 	add.w	r3, r7, #28
 8004766:	4619      	mov	r1, r3
 8004768:	4805      	ldr	r0, [pc, #20]	; (8004780 <HAL_TIM_MspPostInit+0x140>)
 800476a:	f7fb ffdd 	bl	8000728 <HAL_GPIO_Init>
}
 800476e:	bf00      	nop
 8004770:	3730      	adds	r7, #48	; 0x30
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40010000 	.word	0x40010000
 800477c:	40023800 	.word	0x40023800
 8004780:	40020000 	.word	0x40020000
 8004784:	40020400 	.word	0x40020400
 8004788:	40000400 	.word	0x40000400

0800478c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08c      	sub	sp, #48	; 0x30
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	f107 031c 	add.w	r3, r7, #28
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	60da      	str	r2, [r3, #12]
 80047a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a32      	ldr	r2, [pc, #200]	; (8004874 <HAL_UART_MspInit+0xe8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d12d      	bne.n	800480a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	4b31      	ldr	r3, [pc, #196]	; (8004878 <HAL_UART_MspInit+0xec>)
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	4a30      	ldr	r2, [pc, #192]	; (8004878 <HAL_UART_MspInit+0xec>)
 80047b8:	f043 0310 	orr.w	r3, r3, #16
 80047bc:	6453      	str	r3, [r2, #68]	; 0x44
 80047be:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <HAL_UART_MspInit+0xec>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <HAL_UART_MspInit+0xec>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	4a29      	ldr	r2, [pc, #164]	; (8004878 <HAL_UART_MspInit+0xec>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	6313      	str	r3, [r2, #48]	; 0x30
 80047da:	4b27      	ldr	r3, [pc, #156]	; (8004878 <HAL_UART_MspInit+0xec>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80047e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80047ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ec:	2302      	movs	r3, #2
 80047ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047f0:	2301      	movs	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f4:	2303      	movs	r3, #3
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80047f8:	2307      	movs	r3, #7
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fc:	f107 031c 	add.w	r3, r7, #28
 8004800:	4619      	mov	r1, r3
 8004802:	481e      	ldr	r0, [pc, #120]	; (800487c <HAL_UART_MspInit+0xf0>)
 8004804:	f7fb ff90 	bl	8000728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004808:	e030      	b.n	800486c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <HAL_UART_MspInit+0xf4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d12b      	bne.n	800486c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <HAL_UART_MspInit+0xec>)
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	4a16      	ldr	r2, [pc, #88]	; (8004878 <HAL_UART_MspInit+0xec>)
 800481e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004822:	6413      	str	r3, [r2, #64]	; 0x40
 8004824:	4b14      	ldr	r3, [pc, #80]	; (8004878 <HAL_UART_MspInit+0xec>)
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_UART_MspInit+0xec>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <HAL_UART_MspInit+0xec>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6313      	str	r3, [r2, #48]	; 0x30
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_UART_MspInit+0xec>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800484c:	230c      	movs	r3, #12
 800484e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004850:	2302      	movs	r3, #2
 8004852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004854:	2301      	movs	r3, #1
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004858:	2303      	movs	r3, #3
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800485c:	2307      	movs	r3, #7
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004860:	f107 031c 	add.w	r3, r7, #28
 8004864:	4619      	mov	r1, r3
 8004866:	4805      	ldr	r0, [pc, #20]	; (800487c <HAL_UART_MspInit+0xf0>)
 8004868:	f7fb ff5e 	bl	8000728 <HAL_GPIO_Init>
}
 800486c:	bf00      	nop
 800486e:	3730      	adds	r7, #48	; 0x30
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40011000 	.word	0x40011000
 8004878:	40023800 	.word	0x40023800
 800487c:	40020000 	.word	0x40020000
 8004880:	40004400 	.word	0x40004400

08004884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	; 0x30
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8004894:	2200      	movs	r2, #0
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	201e      	movs	r0, #30
 800489a:	f7fb ff1b 	bl	80006d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800489e:	201e      	movs	r0, #30
 80048a0:	f7fb ff34 	bl	800070c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	4b1f      	ldr	r3, [pc, #124]	; (8004928 <HAL_InitTick+0xa4>)
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	4a1e      	ldr	r2, [pc, #120]	; (8004928 <HAL_InitTick+0xa4>)
 80048ae:	f043 0304 	orr.w	r3, r3, #4
 80048b2:	6413      	str	r3, [r2, #64]	; 0x40
 80048b4:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <HAL_InitTick+0xa4>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048c0:	f107 0210 	add.w	r2, r7, #16
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fc fdfa 	bl	80014c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80048d0:	f7fc fdd0 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 80048d4:	4603      	mov	r3, r0
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	4a13      	ldr	r2, [pc, #76]	; (800492c <HAL_InitTick+0xa8>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	0c9b      	lsrs	r3, r3, #18
 80048e4:	3b01      	subs	r3, #1
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_InitTick+0xac>)
 80048ea:	4a12      	ldr	r2, [pc, #72]	; (8004934 <HAL_InitTick+0xb0>)
 80048ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80048ee:	4b10      	ldr	r3, [pc, #64]	; (8004930 <HAL_InitTick+0xac>)
 80048f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048f4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80048f6:	4a0e      	ldr	r2, [pc, #56]	; (8004930 <HAL_InitTick+0xac>)
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <HAL_InitTick+0xac>)
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_InitTick+0xac>)
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8004908:	4809      	ldr	r0, [pc, #36]	; (8004930 <HAL_InitTick+0xac>)
 800490a:	f7fc fe71 	bl	80015f0 <HAL_TIM_Base_Init>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d104      	bne.n	800491e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8004914:	4806      	ldr	r0, [pc, #24]	; (8004930 <HAL_InitTick+0xac>)
 8004916:	f7fc fe96 	bl	8001646 <HAL_TIM_Base_Start_IT>
 800491a:	4603      	mov	r3, r0
 800491c:	e000      	b.n	8004920 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
}
 8004920:	4618      	mov	r0, r3
 8004922:	3730      	adds	r7, #48	; 0x30
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	431bde83 	.word	0x431bde83
 8004930:	200041c8 	.word	0x200041c8
 8004934:	40000800 	.word	0x40000800

08004938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004946:	b480      	push	{r7}
 8004948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800494a:	e7fe      	b.n	800494a <HardFault_Handler+0x4>

0800494c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004950:	e7fe      	b.n	8004950 <MemManage_Handler+0x4>

08004952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004952:	b480      	push	{r7}
 8004954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004956:	e7fe      	b.n	8004956 <BusFault_Handler+0x4>

08004958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800495c:	e7fe      	b.n	800495c <UsageFault_Handler+0x4>

0800495e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004970:	4802      	ldr	r0, [pc, #8]	; (800497c <TIM4_IRQHandler+0x10>)
 8004972:	f7fc feb7 	bl	80016e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	200041c8 	.word	0x200041c8

08004980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <SystemInit+0x60>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <SystemInit+0x60>)
 800498c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <SystemInit+0x64>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <SystemInit+0x64>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <SystemInit+0x64>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80049a6:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <SystemInit+0x64>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a0e      	ldr	r2, [pc, #56]	; (80049e4 <SystemInit+0x64>)
 80049ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80049b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <SystemInit+0x64>)
 80049b8:	4a0b      	ldr	r2, [pc, #44]	; (80049e8 <SystemInit+0x68>)
 80049ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <SystemInit+0x64>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <SystemInit+0x64>)
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <SystemInit+0x64>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049ce:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <SystemInit+0x60>)
 80049d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049d4:	609a      	str	r2, [r3, #8]
#endif
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00
 80049e4:	40023800 	.word	0x40023800
 80049e8:	24003010 	.word	0x24003010

080049ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80049ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80049f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80049f2:	e003      	b.n	80049fc <LoopCopyDataInit>

080049f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80049f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80049f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80049fa:	3104      	adds	r1, #4

080049fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80049fc:	480b      	ldr	r0, [pc, #44]	; (8004a2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a04:	d3f6      	bcc.n	80049f4 <CopyDataInit>
  ldr  r2, =_sbss
 8004a06:	4a0b      	ldr	r2, [pc, #44]	; (8004a34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a08:	e002      	b.n	8004a10 <LoopFillZerobss>

08004a0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a0c:	f842 3b04 	str.w	r3, [r2], #4

08004a10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a14:	d3f9      	bcc.n	8004a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a16:	f7ff ffb3 	bl	8004980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a1a:	f000 f811 	bl	8004a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a1e:	f7ff f8f1 	bl	8003c04 <main>
  bx  lr    
 8004a22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a28:	08004b80 	.word	0x08004b80
  ldr  r0, =_sdata
 8004a2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a30:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004a34:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004a38:	20004208 	.word	0x20004208

08004a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a3c:	e7fe      	b.n	8004a3c <ADC_IRQHandler>
	...

08004a40 <__libc_init_array>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	4e0d      	ldr	r6, [pc, #52]	; (8004a78 <__libc_init_array+0x38>)
 8004a44:	4c0d      	ldr	r4, [pc, #52]	; (8004a7c <__libc_init_array+0x3c>)
 8004a46:	1ba4      	subs	r4, r4, r6
 8004a48:	10a4      	asrs	r4, r4, #2
 8004a4a:	2500      	movs	r5, #0
 8004a4c:	42a5      	cmp	r5, r4
 8004a4e:	d109      	bne.n	8004a64 <__libc_init_array+0x24>
 8004a50:	4e0b      	ldr	r6, [pc, #44]	; (8004a80 <__libc_init_array+0x40>)
 8004a52:	4c0c      	ldr	r4, [pc, #48]	; (8004a84 <__libc_init_array+0x44>)
 8004a54:	f000 f820 	bl	8004a98 <_init>
 8004a58:	1ba4      	subs	r4, r4, r6
 8004a5a:	10a4      	asrs	r4, r4, #2
 8004a5c:	2500      	movs	r5, #0
 8004a5e:	42a5      	cmp	r5, r4
 8004a60:	d105      	bne.n	8004a6e <__libc_init_array+0x2e>
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a68:	4798      	blx	r3
 8004a6a:	3501      	adds	r5, #1
 8004a6c:	e7ee      	b.n	8004a4c <__libc_init_array+0xc>
 8004a6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a72:	4798      	blx	r3
 8004a74:	3501      	adds	r5, #1
 8004a76:	e7f2      	b.n	8004a5e <__libc_init_array+0x1e>
 8004a78:	08004b78 	.word	0x08004b78
 8004a7c:	08004b78 	.word	0x08004b78
 8004a80:	08004b78 	.word	0x08004b78
 8004a84:	08004b7c 	.word	0x08004b7c

08004a88 <memset>:
 8004a88:	4402      	add	r2, r0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <memset+0xa>
 8004a90:	4770      	bx	lr
 8004a92:	f803 1b01 	strb.w	r1, [r3], #1
 8004a96:	e7f9      	b.n	8004a8c <memset+0x4>

08004a98 <_init>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr

08004aa4 <_fini>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr
